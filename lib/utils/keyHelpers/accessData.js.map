{"version":3,"file":"accessData.js","names":["debug","_interopRequireWildcard","require","_solidLogic","ns","_otherHelpers","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","pubKeyUrl","exports","webId","url","root","getRootIfPreferencesExist","concat","err","error","privKeyUrl","getExistingPublicKey","_x","_x2","_getExistingPublicKey","apply","arguments","_asyncToGenerator2","_regenerator","mark","_callee","publicKeyUrl","wrap","_callee$","_context","prev","next","getKeyIfExists","abrupt","sent","stop","getExistingPrivateKey","_x3","_x4","_getExistingPrivateKey","_callee2","privateKeyUrl","_callee2$","_context2","_x5","_x6","_x7","_getKeyIfExists","_callee3","keyUrl","keyType","key","_callee3$","_context3","store","fetcher","load","any","solid","value","t0","response","status","log","webOperation","data","contentType","t1","requested","undefined"],"sources":["../../../src/utils/keyHelpers/accessData.ts"],"sourcesContent":["import * as debug from '../../debug'\nimport { store } from 'solid-logic'\nimport * as ns from '../../ns'\nimport { NamedNode } from 'rdflib'\nimport { getRootIfPreferencesExist } from './otherHelpers'\n\nexport const pubKeyUrl = (webId: NamedNode) => {\n  let url\n  try {\n    const root = getRootIfPreferencesExist(webId)\n    url = `${root}/profile/keys/publicKey.ttl`\n  } catch (err) {\n    debug.error(err)\n  }\n  return url\n}\n\nexport const privKeyUrl = (webId: NamedNode) => {\n  let url\n  try {\n    const root = getRootIfPreferencesExist(webId)\n    url = `${root}/settings/keys/privateKey.ttl`\n  } catch (err) {\n    debug.error(err)\n  }\n  return url\n}\n\nexport async function getExistingPublicKey (webId: NamedNode, publicKeyUrl: string) {\n  // find publickey\n  return await getKeyIfExists(webId, publicKeyUrl, 'publicKey')\n}\n\nexport async function getExistingPrivateKey (webId: NamedNode, privateKeyUrl: string) {\n  // find privateKey\n  return await getKeyIfExists(webId, privateKeyUrl, 'privateKey')\n}\n\ntype KeyType = 'publicKey' | 'privateKey'\n\nexport async function getKeyIfExists (webId: NamedNode, keyUrl: string, keyType: KeyType) {\n  try {\n    await store.fetcher.load(keyUrl)\n    const key = store.any(webId, ns.solid(keyType)) // store.sym(CERT + keyType))\n    return key?.value // as NamedNode\n  } catch (err) {\n    if (err.response.status === 404) {\n      debug.log(\n        'createIfNotExists: doc does NOT exist, will create... ' + keyUrl\n      )\n      try {\n        await store.fetcher.webOperation('PUT', keyUrl, {\n          data: '',\n          contentType: 'text/turtle'\n        })\n      } catch (err) {\n        debug.log('createIfNotExists doc FAILED: ' + keyUrl + ': ' + err)\n        throw err\n      }\n      delete store.fetcher.requested[keyUrl] // delete cached 404 error\n      // debug.log('createIfNotExists doc created ok ' + doc)\n      return undefined // response\n    } else {\n      debug.log('createIfNotExists doc FAILED: ' + keyUrl + ': ' + err)\n      throw err\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}