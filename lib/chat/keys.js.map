{"version":3,"file":"keys.js","names":["debug","_interopRequireWildcard","require","_secp256k","_utils","ns","_solidLogic","$rdf","_accessData","_acl","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","_typeof","has","get","set","_t3","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","generatePrivateKey","bytesToHex","schnorr","utils","randomPrivateKey","generatePublicKey","privateKey","getPublicKey","_x","_getPublicKey","apply","arguments","_asyncToGenerator2","_regenerator","mark","_callee2","webId","publicKeyDoc","key","_t2","wrap","_context2","prev","next","store","fetcher","load","pubKeyUrl","sent","any","solid","abrupt","value","undefined","stop","getPrivateKey","_x2","_getPrivateKey","_callee3","privateKeyDoc","publicKey","validPublicKey","del","add","newPublicKey","keyContainer","_context3","privKeyUrl","getExistingPublicKey","getExistingPrivateKey","confirm","uri","st","literal","sym","saveKey","lit","log","substring","lastIndexOf","setAcl","keyContainerAclBody","deleteKeyAcl","_ref","_callee","keyDoc","keyAclDoc","response","_t","_context","webOperation","status","Error","_x3","_x4","_x5","_x6","_saveKey","me","length","_callee4","aclBody","_context4","updater","updateMany","keyAclBody"],"sources":["../../src/chat/keys.ts"],"sourcesContent":["import * as debug from '../debug'\r\nimport { schnorr } from '@noble/curves/secp256k1'\r\nimport { bytesToHex } from '@noble/hashes/utils'\r\nimport * as ns from '../ns'\r\nimport { store } from 'solid-logic'\r\nimport { NamedNode } from 'rdflib'\r\nimport * as $rdf from 'rdflib'\r\nimport { getExistingPublicKey, pubKeyUrl, privKeyUrl, getExistingPrivateKey } from '../utils/keyHelpers/accessData'\r\nimport { setAcl, keyContainerAclBody, keyAclBody } from '../utils/keyHelpers/acl'\r\n\r\nexport function generatePrivateKey (): string {\r\n  return bytesToHex(schnorr.utils.randomPrivateKey())\r\n}\r\n\r\nexport function generatePublicKey (privateKey: string): string {\r\n  return bytesToHex(schnorr.getPublicKey(privateKey))\r\n}\r\n\r\n/**\r\n * getPublicKey\r\n * used for displaying messages in chat, therefore does not\r\n * create a new key if not found\r\n * @param webId\r\n * @returns string | undefined\r\n */\r\nexport async function getPublicKey (webId: NamedNode) {\r\n  await store.fetcher.load(webId)\r\n  const publicKeyDoc = await pubKeyUrl(webId)\r\n  try {\r\n    await store.fetcher.load(publicKeyDoc) // url.href)\r\n    const key = store.any(webId, ns.solid('publicKey'))\r\n    return key?.value // as NamedNode\r\n  } catch (err) {\r\n    return undefined\r\n  }\r\n}\r\n\r\nexport async function getPrivateKey (webId: NamedNode) {\r\n  await store.fetcher.load(webId)\r\n  // find keys url's\r\n  const publicKeyDoc = await pubKeyUrl(webId)\r\n  const privateKeyDoc = await privKeyUrl(webId)\r\n\r\n  // find key pair\r\n  const publicKey = await getExistingPublicKey(webId, publicKeyDoc)\r\n  let privateKey = await getExistingPrivateKey(webId, privateKeyDoc)\r\n\r\n  // is publicKey valid ?\r\n  let validPublicKey = true\r\n  if (privateKey && (publicKey !== generatePublicKey(privateKey as string))) {\r\n    if (confirm('This is strange the publicKey is not valid for\\n' + webId?.uri +\r\n     '\\'shall we repair keeping the private key ?')) validPublicKey = false\r\n  }\r\n\r\n  // create key pair or repair publicKey\r\n  if (!privateKey || !publicKey || !validPublicKey) {\r\n    let del: any[] = []\r\n    let add: any[] = []\r\n\r\n    if (!privateKey) {\r\n      // add = []\r\n      privateKey = generatePrivateKey()\r\n      add = [$rdf.st(webId, ns.solid('privateKey'), $rdf.literal(privateKey), store.sym(privateKeyDoc))]\r\n      await saveKey(privateKeyDoc, [], add, webId.uri)\r\n    }\r\n    if (!publicKey || !validPublicKey) {\r\n      del = []\r\n      // delete invalid public key\r\n      if (publicKey) {\r\n        del = [$rdf.st(webId, ns.solid('publicKey'), $rdf.lit(publicKey), store.sym(publicKeyDoc))]\r\n        debug.log('delete invalid publicKey ' + del)\r\n      }\r\n      // update new valid key\r\n      const newPublicKey = generatePublicKey(privateKey)\r\n      add = [$rdf.st(webId, ns.solid('publicKey'), $rdf.literal(newPublicKey), store.sym(publicKeyDoc))]\r\n      await saveKey(publicKeyDoc, del, add)\r\n    }\r\n    const keyContainer = privateKeyDoc.substring(0, privateKeyDoc.lastIndexOf('/') + 1)\r\n    await setAcl(keyContainer, keyContainerAclBody(webId.uri)) // includes DELETE and PUT\r\n  }\r\n  return privateKey as string\r\n}\r\n\r\nconst deleteKeyAcl = async (keyDoc: string) => {\r\n  await store.fetcher.load(keyDoc)\r\n\r\n  const keyAclDoc = store.any(store.sym(keyDoc), store.sym('http://www.iana.org/assignments/link-relations/acl'))\r\n  if (keyAclDoc) {\r\n    // delete READ only keyAclDoc. This is possible if the webId is an owner\r\n    try {\r\n      const response = await store.fetcher.webOperation('DELETE', keyAclDoc.value) // this may fail if webId is not an owner\r\n      debug.log('delete keyAcl' + keyAclDoc.value + ' ' + response.status) // should test 404 and 2xx\r\n    } catch (err) {\r\n      if (err.response.status !== 404) { throw new Error(err) }\r\n      debug.log('delete keyAcl' + keyAclDoc.value + ' ' + err.response.status) // should test 404 and 2xx\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * delete acl if keydoc exists\r\n * create/edit keyDoc\r\n * set keyDoc acl\r\n */\r\nasync function saveKey (keyDoc: string, del, add, me: string = '') {\r\n  await deleteKeyAcl(keyDoc)\r\n  // save key\r\n  await store.updater.updateMany(del, add) // or a promise store.updater.update ?\r\n\r\n  // create READ only ACL\r\n  const aclBody = keyAclBody(keyDoc, me)\r\n  await setAcl(keyDoc, aclBody)\r\n}\r\n"],"mappings":"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","ignoreList":[]}