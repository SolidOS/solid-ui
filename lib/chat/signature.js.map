{"version":3,"file":"signature.js","names":["_secp256k","require","_utils","_sha","utf8Decoder","exports","TextDecoder","utf8Encoder","TextEncoder","SEC","getBlankMsg","id","created","dateDeleted","content","maker","sig","serializeMsg","msg","JSON","stringify","getMsgHash","message","msgHash","sha256","encode","bytesToHex","verifySignature","pubKey","schnorr","verify","signMsg","key","sign"],"sources":["../../src/chat/signature.ts"],"sourcesContent":["import { schnorr } from '@noble/curves/secp256k1'\r\nimport { bytesToHex } from '@noble/hashes/utils'\r\nimport { sha256 } from '@noble/hashes/sha256'\r\n\r\n// import {utf8Encoder} from './utils'\r\n// import { getPublicKey } from './keys'\r\n\r\nexport const utf8Decoder = new TextDecoder('utf-8')\r\nexport const utf8Encoder = new TextEncoder()\r\n\r\nexport const SEC = 'https://w3id.org/security#' // Proof, VerificationMethod\r\n// export const CERT = 'http://www.w3.org/ns/auth/cert#' // PrivateKey, PublicKey, key\r\n\r\n/* export enum Kind {\r\n  Metadata = 0,\r\n  Text = 1,\r\n  RecommendRelay = 2,\r\n  Contacts = 3,\r\n  EncryptedDirectMessage = 4,\r\n  EventDeletion = 5,\r\n  Reaction = 7,\r\n  BadgeAward = 8,\r\n  ChannelCreation = 40,\r\n  ChannelMetadata = 41,\r\n  ChannelMessage = 42,\r\n  ChannelHideMessage = 43,\r\n  ChannelMuteUser = 44,\r\n  Report = 1984,\r\n  ZapRequest = 9734,\r\n  Zap = 9735,\r\n  RelayList = 10002,\r\n  ClientAuth = 22242,\r\n  BadgeDefinition = 30008,\r\n  ProfileBadge = 30009,\r\n  Article = 30023\r\n} */\r\n\r\nexport type MsgTemplate = {\r\n  id: string\r\n  created: string\r\n  dateDeleted: string\r\n  content: string\r\n  maker: string\r\n  sig: string\r\n}\r\n\r\nexport type UnsignedMsg = MsgTemplate & {\r\n  pubkey: string\r\n}\r\n\r\nexport type Message = UnsignedMsg & {\r\n  id: string\r\n  sig: string\r\n}\r\n\r\nexport function getBlankMsg (): MsgTemplate {\r\n  return {\r\n    id: '',\r\n    created: '',\r\n    dateDeleted: '', // TODO to remove if not used\r\n    content: '',\r\n    maker: '',\r\n    sig: '' // TODO to remove if not used\r\n  }\r\n}\r\n\r\n/* export function finishMsg (t: MsgTemplate, privateKey: string): Message {\r\n  // to update to chat message triples\r\n  const message = t as Message\r\n  // message.pubkey = getPublicKey(privateKey)\r\n  message.id = getMsgHash(message)\r\n  message.sig = signMsg(message, privateKey)\r\n  return message\r\n} */\r\n\r\nexport function serializeMsg (msg: UnsignedMsg): string {\r\n  // to update to chat messages triples\r\n  /* if (!validateMsg(msg))\r\n    throw new Error(\"can't serialize message with wrong or missing properties\") */\r\n\r\n  return JSON.stringify(msg)\r\n}\r\n\r\nexport function getMsgHash (message: UnsignedMsg) {\r\n  const msgHash = sha256(utf8Encoder.encode(serializeMsg(message)))\r\n  return bytesToHex(msgHash)\r\n}\r\n\r\n// const isRecord = (obj: unknown): obj is Record<string, unknown> => obj instanceof Object\r\n\r\n/* export function validateMsg<T> (message: T): message is T & UnsignedMsg {\r\n  if (!isRecord(message)) return false\r\n  if (typeof message.kind !== 'number') return false\r\n  if (typeof message.content !== 'string') return false\r\n  if (typeof message.created_at !== 'number') return false\r\n  if (typeof message.pubkey !== 'string') return false\r\n  if (!message.pubkey.match(/^[a-f0-9]{64}$/)) return false\r\n\r\n  if (!Array.isArray(message.tags)) return false\r\n  for (let i = 0; i < message.tags.length; i++) {\r\n    let tag = message.tags[i]\r\n    if (!Array.isArray(tag)) return false\r\n    for (let j = 0; j < tag.length; j++) {\r\n      if (typeof tag[j] === 'object') return false\r\n    }\r\n  }\r\n\r\n  return true\r\n} */\r\n\r\nexport function verifySignature (sig: string, message: Message, pubKey: string): boolean {\r\n  return schnorr.verify(\r\n    sig,\r\n    getMsgHash(message),\r\n    pubKey\r\n  )\r\n}\r\n\r\nexport function signMsg (message: UnsignedMsg, key: string): string {\r\n  return bytesToHex(\r\n    schnorr.sign(getMsgHash(message), key)\r\n  )\r\n}\r\n"],"mappings":";;;;;;;;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AACA,IAAAC,MAAA,GAAAD,OAAA;AACA,IAAAE,IAAA,GAAAF,OAAA;AAEA;AACA;;AAEO,IAAMG,WAAW,GAAAC,OAAA,CAAAD,WAAA,GAAG,IAAIE,WAAW,CAAC,OAAO,CAAC;AAC5C,IAAMC,WAAW,GAAAF,OAAA,CAAAE,WAAA,GAAG,IAAIC,WAAW,CAAC,CAAC;AAErC,IAAMC,GAAG,GAAAJ,OAAA,CAAAI,GAAA,GAAG,4BAA4B,EAAC;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAoBO,SAASC,WAAWA,CAAA,EAAiB;EAC1C,OAAO;IACLC,EAAE,EAAE,EAAE;IACNC,OAAO,EAAE,EAAE;IACXC,WAAW,EAAE,EAAE;IAAE;IACjBC,OAAO,EAAE,EAAE;IACXC,KAAK,EAAE,EAAE;IACTC,GAAG,EAAE,EAAE,CAAC;EACV,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,SAASC,YAAYA,CAAEC,GAAgB,EAAU;EACtD;EACA;AACF;;EAEE,OAAOC,IAAI,CAACC,SAAS,CAACF,GAAG,CAAC;AAC5B;AAEO,SAASG,UAAUA,CAAEC,OAAoB,EAAE;EAChD,IAAMC,OAAO,GAAG,IAAAC,WAAM,EAACjB,WAAW,CAACkB,MAAM,CAACR,YAAY,CAACK,OAAO,CAAC,CAAC,CAAC;EACjE,OAAO,IAAAI,iBAAU,EAACH,OAAO,CAAC;AAC5B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEO,SAASI,eAAeA,CAAEX,GAAW,EAAEM,OAAgB,EAAEM,MAAc,EAAW;EACvF,OAAOC,iBAAO,CAACC,MAAM,CACnBd,GAAG,EACHK,UAAU,CAACC,OAAO,CAAC,EACnBM,MACF,CAAC;AACH;AAEO,SAASG,OAAOA,CAAET,OAAoB,EAAEU,GAAW,EAAU;EAClE,OAAO,IAAAN,iBAAU,EACfG,iBAAO,CAACI,IAAI,CAACZ,UAAU,CAACC,OAAO,CAAC,EAAEU,GAAG,CACvC,CAAC;AACH","ignoreList":[]}