{"version":3,"file":"chatLogic.js","names":["debug","_interopRequireWildcard","require","_dateFolder","_solidLogic","ns","$rdf","utils","_signature","_keys","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","ChatChannel","exports","channel","options","_classCallCheck2","channelRoot","doc","dateFolder","DateFolder","div","_createClass2","key","value","_createMessage","_asyncToGenerator2","_regenerator","mark","_callee","text","wrap","_callee$","_context","prev","next","abrupt","updateMessage","stop","createMessage","_x","apply","arguments","_updateMessage","_this","oldMsg","length","undefined","deleteIt","thread","_callee2","sts","now","timestamp","dateStamp","chatDocument","message","me","msg","oldMsgMaker","oldMsgMostRecentVersion","oldMsgThread","errMsg","privateKey","sig","_errMsg","_callee2$","_context2","Date","getTime","term","leafDocumentFromDate","store","sym","uri","authn","currentUser","getBlankMsg","id","any","foaf","mostRecentVersion","sent","push","st","dct","sioc","schema","warn","alert","Error","wf","literal","content","created","maker","getPrivateKey","signMsg","concat","SEC","lit","sameTerm","updater","updateMany","t0","_x2","_deleteMessage","_callee3","_callee3$","_context3","deleteMessage","_x3","_createThread","_callee4","threadRoot","already","insert","_callee4$","_context4","each","filter","holds","rdf","update","createThread","_x4","allVersions","_x5","_allVersions","_callee5","versions","done","m","_callee5$","_context5","fetcher","load","unshift","originalVersion","_x6","_originalVersion","_callee6","_callee6$","_context6","error","_x7","_mostRecentVersion","_callee7","_callee7$","_context7","isDeleted","isReplaced","isHidden","nick","person","s","label"],"sources":["../../src/chat/chatLogic.js"],"sourcesContent":["/**\n * Contains the [[ChatChannel]] class and logic for Solid Chat\n * @packageDocumentation\n */\n\nimport * as debug from '../debug'\nimport { DateFolder } from './dateFolder'\nimport { store, authn } from 'solid-logic'\nimport * as ns from '../ns'\nimport * as $rdf from 'rdflib' // pull in first avoid cross-refs\nimport * as utils from '../utils'\nimport { getBlankMsg, signMsg, SEC } from './signature'\nimport { getPrivateKey } from './keys'\n\n/* The Solid logic for a 'LongChat'\n*/\n/**\n * Common code for a chat (discussion area of messages about something)\n * This version runs over a series of files for different time periods\n *\n * Parameters for the whole chat like its title are stored on\n * index.ttl#this and the chats messages are stored in YYYY/MM/DD/chat.ttl\n *\n */\n\nexport class ChatChannel {\n  constructor (channel, options) {\n    this.channel = channel\n    this.channelRoot = channel.doc()\n    this.options = options\n    this.dateFolder = new DateFolder(this.channelRoot, 'chat.ttl')\n    this.div = null // : HTMLElement\n  }\n\n  /* Store a new message in the web,\n  */\n  async createMessage (text) {\n    return this.updateMessage(text)\n  }\n\n  /* Store a new message in the web,\n    as a replacement for an existing one.\n    The old one iis left, and the two are linked\n  */\n  async updateMessage (text, oldMsg = null, deleteIt, thread = null) {\n    const sts = []\n    const now = new Date()\n    const timestamp = '' + now.getTime()\n    const dateStamp = $rdf.term(now)\n    const chatDocument = oldMsg ? oldMsg.doc() : this.dateFolder.leafDocumentFromDate(now)\n    const message = store.sym(chatDocument.uri + '#' + 'Msg' + timestamp)\n    // const content = store.literal(text)\n\n    const me = authn.currentUser() // If already logged on\n\n    const msg = getBlankMsg()\n    msg.id = message.uri\n    if (oldMsg) { // edit message replaces old one\n      const oldMsgMaker = store.any(oldMsg, ns.foaf('maker')) // may not be needed here, but needed on READ\n      if (oldMsgMaker.uri === me.uri) {\n        const oldMsgMostRecentVersion = await mostRecentVersion(oldMsg)\n        sts.push($rdf.st(oldMsgMostRecentVersion, ns.dct('isReplacedBy'), message, chatDocument))\n        // if oldMsg has_reply => add has_reply to message\n        const oldMsgThread = store.any(oldMsgMostRecentVersion, ns.sioc('has_reply'))\n        if (oldMsgThread) {\n          sts.push($rdf.st(message, ns.sioc('has_reply'), oldMsgThread, chatDocument))\n        }\n        if (deleteIt) { // we need to add a specific signature, else anyone can delete a msg ?\n          sts.push($rdf.st(message, ns.schema('dateDeleted'), dateStamp, chatDocument))\n        }\n      } else {\n        const errMsg = 'Error you cannot delete/edit a message from someone else : \\n' + oldMsgMaker.uri\n        debug.warn(errMsg)\n        alert(errMsg)\n        throw new Error(errMsg)\n      }\n    } else { // link new message to channel\n      sts.push($rdf.st(this.channel, ns.wf('message'), message, chatDocument))\n    }\n    sts.push(\n      $rdf.st(message, ns.sioc('content'), store.literal(text), chatDocument)\n    )\n    msg.content = text\n\n    sts.push(\n      $rdf.st(message, ns.dct('created'), dateStamp, chatDocument)\n    )\n    msg.created = dateStamp.value\n    if (me) {\n      sts.push($rdf.st(message, ns.foaf('maker'), me, chatDocument))\n      msg.maker = me.uri\n      // privateKey the cached private key of me, cached in store\n      const privateKey = await getPrivateKey(me) // me.uri)\n\n      const sig = signMsg(msg, privateKey)\n      sts.push($rdf.st(message, $rdf.sym(`${SEC}proofValue`), $rdf.lit(sig), chatDocument))\n    }\n    if (thread) {\n      sts.push($rdf.st(thread, ns.sioc('has_member'), message, chatDocument))\n      if (!thread.doc().sameTerm(message.doc())) {\n        sts.push($rdf.st(thread, ns.sioc('has_member'), message, thread.doc()))\n      }\n    }\n\n    try {\n      await store.updater.updateMany([], sts)\n    } catch (err) {\n      const errMsg = 'Error saving chat message: ' + err\n      debug.warn(errMsg)\n      alert(errMsg)\n      throw new Error(errMsg)\n    }\n    return message\n  }\n\n  /* Mark a message as deleted\n  * Wee add a new version of the message,m witha deletion flag (deletion date)\n  * so that the deletion can be revoked by adding another non-deleted update\n  */\n  async deleteMessage (message) {\n    return this.updateMessage('(message deleted)', message, true)\n  }\n\n  // Create a new thread of replies to the thread root message\n  //  or return one which already exists\n\n  async createThread (threadRoot) {\n    const already = store.each(threadRoot, ns.sioc('has_reply'), null, threadRoot.doc())\n      .filter(thread => store.holds(thread, ns.rdf('type'), ns.sioc('Thread'), thread.doc()))\n    if (already.length > 0) return already[0]\n\n    const thread = $rdf.sym(threadRoot.uri + '-thread')\n    const insert = [\n      $rdf.st(thread, ns.rdf('type'), ns.sioc('Thread'), thread.doc()),\n      $rdf.st(threadRoot, ns.sioc('has_reply'), thread, thread.doc())\n    ]\n    await store.updater.update([], insert)\n    return thread\n  }\n} // class ChatChannel\n\n// ////////// Utility functions\n\n// Have to not loop forever if fed loops\nexport async function allVersions (message) {\n  const versions = [message]\n  const done = {}\n  done[message.uri] = true\n  let m = message\n  while (true) { // earlier?\n    const prev = store.any(null, ns.dct('isReplacedBy'), m, m.doc())\n    if (!prev || done[prev.uri]) break\n    await store.fetcher.load(prev)\n    versions.unshift(prev)\n    done[prev.uri] = true\n    m = prev\n  }\n  m = message\n  while (true) { // later?\n    const next = store.any(m, ns.dct('isReplacedBy'), null, m.doc())\n    if (!next || done[next.uri]) break\n    versions.push(next)\n    done[next.uri] = true\n    m = next\n  }\n  return versions\n}\n\nexport async function originalVersion (message) {\n  let msg = message\n  const done = {}\n  // done[message.uri] = true\n  while (msg) {\n    if (done[msg.uri]) {\n      debug.error('originalVersion: verion loop' + message)\n      return message\n    }\n    done[msg.uri] = true\n    message = msg\n    await store.fetcher.load(message)\n    msg = store.any(null, ns.dct('isReplacedBy'), message, message.doc())\n  }\n  return message\n}\n\nexport async function mostRecentVersion (message) {\n  let msg = message\n  const done = {}\n  while (msg) {\n    if (done[msg.uri]) {\n      debug.error('mostRecentVersion: verion loop' + message)\n      return message\n    }\n    done[msg.uri] = true\n    message = msg\n    await store.fetcher.load(message)\n    msg = store.any(message, ns.dct('isReplacedBy'), null, message.doc())\n  }\n  return message\n}\n\nexport function isDeleted (message) {\n  return store.holds(message, ns.schema('dateDeleted'), null, message.doc())\n}\n\nexport function isReplaced (message) {\n  return store.holds(message, ns.dct('isReplacedBy'), null, message.doc())\n}\n\nexport function isHidden (message) {\n  return this.isDeleted(message) || this.isReplaced(message)\n}\n\n// A Nickname for a person\n\nexport function nick (person) {\n  const s = store.any(person, ns.foaf('nick'))\n  if (s) return '' + s.value\n  return '' + utils.label(person)\n}\n// ends\n"],"mappings":"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","ignoreList":[]}