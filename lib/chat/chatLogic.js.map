{"version":3,"file":"chatLogic.js","names":["debug","_interopRequireWildcard","require","_dateFolder","_solidLogic","ns","$rdf","utils","_signature","_keys","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","_typeof","has","get","set","_t2","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","ChatChannel","exports","channel","options","_classCallCheck2","channelRoot","doc","dateFolder","DateFolder","div","_createClass2","key","value","_createMessage","_asyncToGenerator2","_regenerator","mark","_callee","text","wrap","_context","prev","next","abrupt","updateMessage","stop","createMessage","_x","apply","arguments","_updateMessage","_this","oldMsg","length","undefined","deleteIt","thread","_callee2","sts","now","timestamp","dateStamp","chatDocument","message","me","msg","oldMsgMaker","oldMsgMostRecentVersion","oldMsgThread","errMsg","privateKey","sig","_errMsg","_t","_context2","Date","getTime","term","leafDocumentFromDate","store","sym","uri","authn","currentUser","getBlankMsg","id","any","foaf","mostRecentVersion","sent","push","st","dct","sioc","schema","warn","alert","Error","wf","literal","content","created","maker","getPrivateKey","signMsg","concat","SEC","lit","sameTerm","updater","updateMany","_x2","_deleteMessage","_callee3","_context3","deleteMessage","_x3","_createThread","_callee4","threadRoot","already","insert","_context4","each","filter","holds","rdf","update","createThread","_x4","allVersions","_x5","_allVersions","_callee5","versions","done","m","_context5","fetcher","load","unshift","originalVersion","_x6","_originalVersion","_callee6","_context6","error","_x7","_mostRecentVersion","_callee7","_context7","isDeleted","isReplaced","isHidden","nick","person","s","label"],"sources":["../../src/chat/chatLogic.js"],"sourcesContent":["/**\n * Contains the [[ChatChannel]] class and logic for Solid Chat\n * @packageDocumentation\n */\n\nimport * as debug from '../debug'\nimport { DateFolder } from './dateFolder'\nimport { store, authn } from 'solid-logic'\nimport * as ns from '../ns'\nimport * as $rdf from 'rdflib' // pull in first avoid cross-refs\nimport * as utils from '../utils'\nimport { getBlankMsg, signMsg, SEC } from './signature'\nimport { getPrivateKey } from './keys'\n\n/* The Solid logic for a 'LongChat'\n*/\n/**\n * Common code for a chat (discussion area of messages about something)\n * This version runs over a series of files for different time periods\n *\n * Parameters for the whole chat like its title are stored on\n * index.ttl#this and the chats messages are stored in YYYY/MM/DD/chat.ttl\n *\n */\n\nexport class ChatChannel {\n  constructor (channel, options) {\n    this.channel = channel\n    this.channelRoot = channel.doc()\n    this.options = options\n    this.dateFolder = new DateFolder(this.channelRoot, 'chat.ttl')\n    this.div = null // : HTMLElement\n  }\n\n  /* Store a new message in the web,\n  */\n  async createMessage (text) {\n    return this.updateMessage(text)\n  }\n\n  /* Store a new message in the web,\n    as a replacement for an existing one.\n    The old one iis left, and the two are linked\n  */\n  async updateMessage (text, oldMsg = null, deleteIt, thread = null) {\n    const sts = []\n    const now = new Date()\n    const timestamp = '' + now.getTime()\n    const dateStamp = $rdf.term(now)\n    const chatDocument = oldMsg ? oldMsg.doc() : this.dateFolder.leafDocumentFromDate(now)\n    const message = store.sym(chatDocument.uri + '#' + 'Msg' + timestamp)\n    // const content = store.literal(text)\n\n    const me = authn.currentUser() // If already logged on\n\n    const msg = getBlankMsg()\n    msg.id = message.uri\n    if (oldMsg) { // edit message replaces old one\n      const oldMsgMaker = store.any(oldMsg, ns.foaf('maker')) // may not be needed here, but needed on READ\n      if (oldMsgMaker.uri === me.uri) {\n        const oldMsgMostRecentVersion = await mostRecentVersion(oldMsg)\n        sts.push($rdf.st(oldMsgMostRecentVersion, ns.dct('isReplacedBy'), message, chatDocument))\n        // if oldMsg has_reply => add has_reply to message\n        const oldMsgThread = store.any(oldMsgMostRecentVersion, ns.sioc('has_reply'))\n        if (oldMsgThread) {\n          sts.push($rdf.st(message, ns.sioc('has_reply'), oldMsgThread, chatDocument))\n        }\n        if (deleteIt) { // we need to add a specific signature, else anyone can delete a msg ?\n          sts.push($rdf.st(message, ns.schema('dateDeleted'), dateStamp, chatDocument))\n        }\n      } else {\n        const errMsg = 'Error you cannot delete/edit a message from someone else : \\n' + oldMsgMaker.uri\n        debug.warn(errMsg)\n        alert(errMsg)\n        throw new Error(errMsg)\n      }\n    } else { // link new message to channel\n      sts.push($rdf.st(this.channel, ns.wf('message'), message, chatDocument))\n    }\n    sts.push(\n      $rdf.st(message, ns.sioc('content'), store.literal(text), chatDocument)\n    )\n    msg.content = text\n\n    sts.push(\n      $rdf.st(message, ns.dct('created'), dateStamp, chatDocument)\n    )\n    msg.created = dateStamp.value\n    if (me) {\n      sts.push($rdf.st(message, ns.foaf('maker'), me, chatDocument))\n      msg.maker = me.uri\n      // privateKey the cached private key of me, cached in store\n      const privateKey = await getPrivateKey(me) // me.uri)\n\n      const sig = signMsg(msg, privateKey)\n      sts.push($rdf.st(message, $rdf.sym(`${SEC}proofValue`), $rdf.lit(sig), chatDocument))\n    }\n    if (thread) {\n      sts.push($rdf.st(thread, ns.sioc('has_member'), message, chatDocument))\n      if (!thread.doc().sameTerm(message.doc())) {\n        sts.push($rdf.st(thread, ns.sioc('has_member'), message, thread.doc()))\n      }\n    }\n\n    try {\n      await store.updater.updateMany([], sts)\n    } catch (err) {\n      const errMsg = 'Error saving chat message: ' + err\n      debug.warn(errMsg)\n      alert(errMsg)\n      throw new Error(errMsg)\n    }\n    return message\n  }\n\n  /* Mark a message as deleted\n  * Wee add a new version of the message,m witha deletion flag (deletion date)\n  * so that the deletion can be revoked by adding another non-deleted update\n  */\n  async deleteMessage (message) {\n    return this.updateMessage('(message deleted)', message, true)\n  }\n\n  // Create a new thread of replies to the thread root message\n  //  or return one which already exists\n\n  async createThread (threadRoot) {\n    const already = store.each(threadRoot, ns.sioc('has_reply'), null, threadRoot.doc())\n      .filter(thread => store.holds(thread, ns.rdf('type'), ns.sioc('Thread'), thread.doc()))\n    if (already.length > 0) return already[0]\n\n    const thread = $rdf.sym(threadRoot.uri + '-thread')\n    const insert = [\n      $rdf.st(thread, ns.rdf('type'), ns.sioc('Thread'), thread.doc()),\n      $rdf.st(threadRoot, ns.sioc('has_reply'), thread, thread.doc())\n    ]\n    await store.updater.update([], insert)\n    return thread\n  }\n} // class ChatChannel\n\n// ////////// Utility functions\n\n// Have to not loop forever if fed loops\nexport async function allVersions (message) {\n  const versions = [message]\n  const done = {}\n  done[message.uri] = true\n  let m = message\n  while (true) { // earlier?\n    const prev = store.any(null, ns.dct('isReplacedBy'), m, m.doc())\n    if (!prev || done[prev.uri]) break\n    await store.fetcher.load(prev)\n    versions.unshift(prev)\n    done[prev.uri] = true\n    m = prev\n  }\n  m = message\n  while (true) { // later?\n    const next = store.any(m, ns.dct('isReplacedBy'), null, m.doc())\n    if (!next || done[next.uri]) break\n    versions.push(next)\n    done[next.uri] = true\n    m = next\n  }\n  return versions\n}\n\nexport async function originalVersion (message) {\n  let msg = message\n  const done = {}\n  // done[message.uri] = true\n  while (msg) {\n    if (done[msg.uri]) {\n      debug.error('originalVersion: verion loop' + message)\n      return message\n    }\n    done[msg.uri] = true\n    message = msg\n    await store.fetcher.load(message)\n    msg = store.any(null, ns.dct('isReplacedBy'), message, message.doc())\n  }\n  return message\n}\n\nexport async function mostRecentVersion (message) {\n  let msg = message\n  const done = {}\n  while (msg) {\n    if (done[msg.uri]) {\n      debug.error('mostRecentVersion: verion loop' + message)\n      return message\n    }\n    done[msg.uri] = true\n    message = msg\n    await store.fetcher.load(message)\n    msg = store.any(message, ns.dct('isReplacedBy'), null, message.doc())\n  }\n  return message\n}\n\nexport function isDeleted (message) {\n  return store.holds(message, ns.schema('dateDeleted'), null, message.doc())\n}\n\nexport function isReplaced (message) {\n  return store.holds(message, ns.dct('isReplacedBy'), null, message.doc())\n}\n\nexport function isHidden (message) {\n  return this.isDeleted(message) || this.isReplaced(message)\n}\n\n// A Nickname for a person\n\nexport function nick (person) {\n  const s = store.any(person, ns.foaf('nick'))\n  if (s) return '' + s.value\n  return '' + utils.label(person)\n}\n// ends\n"],"mappings":"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","ignoreList":[]}