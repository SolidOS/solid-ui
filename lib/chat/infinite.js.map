{"version":3,"file":"infinite.js","names":["$rdf","_interopRequireWildcard","require","_solidLogic","debug","_iconBase","ns","widgets","_chatLogic","_message","_getRequireWildcardCache","e","WeakMap","r","t","__esModule","_typeof","has","get","n","__proto__","a","Object","defineProperty","getOwnPropertyDescriptor","u","hasOwnProperty","call","i","set","_createForOfIteratorHelper","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","done","value","f","TypeError","o","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","desktopNotification","str","window","warn","Notification","permission","requestPermission","then","insertMessageIntoTable","_x","_x2","_x3","_x4","_x5","_x6","_insertMessageIntoTable","apply","arguments","_asyncToGenerator2","_regenerator","mark","_callee","channelObject","messageTable","message","fresh","options","userContext","messageRow","ele","newestFirst","dateString","wrap","_callee$","_context","prev","renderMessageRow","sent","selectedMessage","sameTerm","style","backgroundColor","selectedElement","firstChild","abrupt","newestfirst","AJAR_date","insertBefore","nextSibling","appendChild","stop","infiniteMessageArea","_x7","_x8","_x9","_x10","_infiniteMessageArea","_callee15","dom","wasStore","chatChannel","syncMessages","_syncMessages","addMessage","_addMessage","insertPreviousMessages","_insertPreviousMessages","removePreviousMessages","createMessageTable","_createMessageTable","renderMessageTable","_renderMessageTable","addNewChatDocumentIfNewDay","_addNewChatDocumentIfNewDay","appendCurrentMessages","_appendCurrentMessages","loadMoreWhereNeeded","_loadMoreWhereNeeded","loadInitialContent","_loadInitialContent","dateFolder","div","statusArea","liveMessageTable","threadRootMessage","earliest","latest","thread","threadTime","lock","_callee15$","_context15","_loadInitialContent3","_callee14","yank","fixScroll","live","selectedDocument","threadRootDocument","initialDocment","now","todayDocument","selectedMessageTable","selectedDate","_callee14$","_context14","_fixScroll","scrollIntoView","block","inputRow","_yank","doc","Date","leafDocumentFromDate","dateFromLeafDocument","setTimeout","addEventListener","solo","document","body","_loadInitialContent2","_loadMoreWhereNeeded3","_callee13","event","freeze","magicZone","scrollBottom","scrollTop","_callee13$","_context13","initial","extendBackwards","scrollHeight","clientHeight","extendForwards","_loadMoreWhereNeeded2","_x20","_x21","_appendCurrentMessage2","_callee12","chatDocument","_callee12$","_context12","refresh","_callee11","_callee11$","_context11","store","updater","addDownstreamChangeListener","_appendCurrentMessage","_addNewChatDocumentIf2","_callee10","newChatDocument","oldChatDocument","sts","_callee10$","_context10","removeChild","holds","rdfs","st","update","err","alert","_addNewChatDocumentIf","_renderMessageTable3","_callee9","date","scrollBackbutton","scrollForwardButton","_extendBackwards","setScrollBackbuttonIcon","_extendForwards","setScrollForwardButtonIcon","scrollForwardButtonHandler","_scrollForwardButtonHandler","tr","titleTR","scrollBackbuttonCell","dateCell","scrollForwardButtonCell","_iterator2","_step2","_callee9$","_context9","_scrollForwardButtonH2","_callee8","_event","_callee8$","_context8","extendedForwards","_scrollForwardButtonH","_x22","_setScrollForwardButt","sense","scrollForwardIcon","getScrollForwardButtonIcon","setAttribute","icons","iconBase","_extendForwards3","_callee7","_callee7$","_context7","_extendForwards2","_setScrollBackbuttonI","extendedBack","scrollBackIcon","getScrollbackIcon","_extendBackwards3","_callee6","_callee6$","_context6","disabled","_extendBackwards2","createElement","width","renderMessageEditor","textContent","shortDate","toISOString","includeRemoveButton","cancelButton","_e","parentNode","statementsMatching","wf","object","t0","finish","_renderMessageTable2","_x18","_x19","_createMessageTable3","_callee5","statusTR","_callee5$","_context5","fetcher","createIfNotExists","response","status","log","errorMessageBlock","_createMessageTable2","_x16","_x17","_removePreviousMessag","backwards","previousSibling","extr","_insertPreviousMessag2","_callee4","extremity","todayDoc","newMessageTable","_callee4$","_context4","limit","loadPrevious","_insertPreviousMessag","_x15","_addMessage3","_callee3","id","_callee3$","_context3","isDeleted","showDeletedMessages","any","sioc","_addMessage2","_x13","_x14","_syncMessages3","_callee2","displayed","ele2","messages","stored","_iterator","_step","m","_callee2$","_context2","AJAR_subject","uri","each","refreshTree","_syncMessages2","_x11","_x12","authorDateOnLeft","ChatChannel","dct"],"sources":["../../src/chat/infinite.js"],"sourcesContent":["/**\n * Contains the [[infiniteMessageArea]] class\n * @packageDocumentation\n */\n// import { findBookmarkDocument } from './bookmarks'\nimport * as $rdf from 'rdflib' // pull in first avoid cross-refs\nimport { store } from 'solid-logic'\nimport * as debug from '../debug'\nimport { icons } from '../iconBase'\nimport * as ns from '../ns'\n// import * as style from '../style'\n// import * as utils from '../utils'\nimport * as widgets from '../widgets'\n// import * as pad from '../pad'\n// import { DateFolder } from './dateFolder'\nimport { ChatChannel, isDeleted } from './chatLogic'\nimport { renderMessageEditor, renderMessageRow } from './message'\n\n// const UI = { authn, icons, ns, media, pad, $rdf, store, style, utils, widgets }\n\nexport function desktopNotification (str) {\n  // Let's check if the browser supports notifications\n  if (!('Notification' in window)) {\n    debug.warn('This browser does no t support desktop notification')\n  } else if (Notification.permission === 'granted') {\n    // Let's check whether notificatio n permissions have already been granted\n    // eslint-disable-next-line no-new\n    new Notification(str)\n  } else if (Notification.permission !== 'denied') {\n    // Otherwise, we need to ask the user for permission\n    Notification.requestPermission().then(function (permission) {\n      // If the user accepts, let's create a notification\n      if (permission === 'granted') {\n        // eslint-disable-next-line no-new\n        new Notification(str)\n      }\n    })\n  }\n  // At last, if the user has denied notifications, and you\n  // want to be respectful there is no need to bother them any more.\n}\n\n/**\n * Renders a chat message inside a `messageTable`\n */\nexport async function insertMessageIntoTable (channelObject, messageTable, message, fresh, options, userContext) {\n  const messageRow = await renderMessageRow(channelObject,\n    message,\n    fresh,\n    options,\n    userContext\n  )\n\n  // const message = messageRow.AJAR_subject\n  if (options.selectedMessage && options.selectedMessage.sameTerm(message)) {\n    messageRow.style.backgroundColor = 'yellow'\n    options.selectedElement = messageRow\n    messageTable.selectedElement = messageRow\n  }\n\n  let done = false\n  for (let ele = messageTable.firstChild; ; ele = ele.nextSibling) {\n    if (!ele) {\n      // empty\n      break\n    }\n    const newestFirst = options.newestfirst === true\n    const dateString = messageRow.AJAR_date\n    if (\n      (dateString > ele.AJAR_date && newestFirst) ||\n      (dateString < ele.AJAR_date && !newestFirst)\n    ) {\n      messageTable.insertBefore(messageRow, ele)\n      done = true\n      break\n    }\n  }\n  if (!done) {\n    messageTable.appendChild(messageRow)\n  }\n}\n\n/**\n * Common code for a chat (discussion area of messages about something)\n * This version runs over a series of files for different time periods\n *\n * Parameters for the whole chat like its title are stored on\n * index.ttl#this and the chats messages are stored in YYYY/MM/DD/chat.ttl\n *\n * Use to import store as param 2, now ignores it and uses the UI main store\n *\n * Options include:\n\n - shiftEnterSendsMessage: Use shift/enter to send message, Enter to add newline, instead of the reverse.\n - authorDateOnLeft:  Display the author's anme and date of the message in the left column instead of first above the content\n - selectedMessage: Display one message highlighted with the chat around it\n - solo: By itelf on a webpage, so user scroll anywhere in the web page scan scroll the chat.\n - newestFirst: Arrange the chat messages chronologically newest at the top insted of at the bottom\n - infinite:  Use infinite scroll\n - showDeletedMessages: Show messages which have been delted as \"deleted message\". Otherwise hide them.\n - expandImagesInline: If a URI by itself in a message looks like an image URI, replace it with the image\n - inlineImageHeightEms: The height (in ems) of images expaned from their URIs in the chat.\n\n */\nexport async function infiniteMessageArea (dom, wasStore, chatChannel, options) {\n  // ///////////////////////////////////////////////////////////////////////\n\n  async function syncMessages (chatChannel, messageTable) {\n    const displayed = {}\n    let ele, ele2\n    for (ele = messageTable.firstChild; ele; ele = ele.nextSibling) {\n      if (ele.AJAR_subject) {\n        displayed[ele.AJAR_subject.uri] = true\n      }\n    }\n    const messages = store.each(chatChannel, ns.wf('message'), null, messageTable.chatDocument)\n\n    const stored = {}\n    for (const m of messages) {\n      stored[m.uri] = true\n      if (!displayed[m.uri]) {\n        await addMessage(m, messageTable)\n      }\n    }\n\n    // eslint-disable-next-line space-in-parens\n    for (ele = messageTable.firstChild; ele;) {\n      ele2 = ele.nextSibling\n      if (ele.AJAR_subject && !stored[ele.AJAR_subject.uri]) {\n        messageTable.removeChild(ele)\n      }\n      ele = ele2\n    }\n    for (ele = messageTable.firstChild; ele; ele = ele.nextSibling) {\n      if (ele.AJAR_subject) {\n        // Refresh thumbs up etc\n        widgets.refreshTree(ele) // Things inside may have changed too\n      }\n    }\n  } // syncMessages\n\n  // Called once per original message displayed\n  async function addMessage (message, messageTable) {\n    // const latest = await mostRecentVersion(message)\n    // const content = store.any(latest, ns.sioc('content'))\n    if (isDeleted(message) && !options.showDeletedMessages) {\n      return // ignore deleted messaged -- @@ could also leave a placeholder\n    }\n    /* if (isReplaced(message)) { //\n      return // this is old version\n    } */\n    let thread = store.any(null, ns.sioc('has_member'), message, message.doc())\n    const id = store.any(message, ns.sioc('id'), null, message.doc())\n    if (id && !thread) {\n      thread = store.any(null, ns.sioc('has_member'), id, message.doc())\n    }\n\n    if (options.thread) { // only show things in thread\n      if (store.holds(message, ns.sioc('has_reply'), options.thread)) { // root of thread\n        // debug.log(' addMessage: displaying root of thread ' + thread)\n      } else if (thread && thread.sameTerm(options.thread)) {\n        // debug.log(' addMessage: Displaying body of thread ' + message.uri.slice(-10))\n      } else {\n        // debug.log(' addMessage: Suppress non-thread message in thread table ' + message.uri.slice(-10))\n        return // suppress message not in thread\n      }\n    } else { // Not threads\n      if (thread) {\n        // debug.log(' addMessage: Suppress thread message in non-thread table ' + message.uri.slice(-10))\n        return // supress thread messages in body\n      } else {\n        // debug.log(' addMessage: Normal non-thread message in non-thread table ' + message.uri.slice(-10))\n      }\n    }\n    if (!messageTable.fresh) { // if messageTable has been updated with insertMessageIntoTable() don't do it again\n      // debug.log('@@@ infinite insertMessageIntoTable ' + message) // alain\n      // debug.log('fresh ' + messageTable.fresh)\n      // debug.log(messageTable)\n      await insertMessageIntoTable(channelObject,\n        messageTable,\n        message,\n        messageTable.fresh,\n        options,\n        userContext\n      ) // fresh from elsewhere\n    }\n  }\n\n  /* Add a new messageTable at the top/bottom\n\n   */\n  async function insertPreviousMessages (backwards) {\n    const extremity = backwards ? earliest : latest\n    let date = extremity.messageTable.date // day in mssecs\n\n    // Are we at the top of a thread?\n    if (backwards && earliest.limit && date <= earliest.limit) {\n      if (!liveMessageTable) await appendCurrentMessages() // If necessary skip to today and add that\n      return true // done\n    }\n    // debug.log(' insertPreviousMessages:  loadPrevious given date ' + date)\n\n    date = await dateFolder.loadPrevious(date, backwards) // backwards\n    // debug.log(' insertPreviousMessages:  loadPrevious returns date ' + date)\n\n    /* debug.log(\n      `insertPreviousMessages: from ${\n        backwards ? 'backwards' : 'forwards'\n      } loadPrevious: ${date}`\n    ) */\n    if (!date && !backwards && !liveMessageTable) {\n      await appendCurrentMessages() // If necessary skip to today and add that\n    }\n    if (!date) return true // done\n    let live = false\n    if (!backwards) {\n      const todayDoc = dateFolder.leafDocumentFromDate(new Date())\n      const doc = dateFolder.leafDocumentFromDate(date)\n      live = doc.sameTerm(todayDoc) // Is this todays?\n    }\n    const newMessageTable = await createMessageTable(date, live)\n    extremity.messageTable = newMessageTable // move pointer to earliest\n    if (backwards ? newestFirst : !newestFirst) {\n      // put on bottom or top\n      div.appendChild(newMessageTable)\n    } else {\n      // put on top as we scroll back\n      div.insertBefore(newMessageTable, div.firstChild)\n    }\n    return live // not done\n  }\n\n  /* Remove message tables earlier than this one\n   */\n  function removePreviousMessages (backwards, messageTable) {\n    if (backwards ? newestFirst : !newestFirst) {\n      // it was put on bottom\n      while (messageTable.nextSibling) {\n        div.removeChild(messageTable.nextSibling)\n      }\n    } else {\n      // it was put on top as we scroll back\n      while (messageTable.previousSibling) {\n        div.removeChild(messageTable.previousSibling)\n      }\n    }\n    const extr = backwards ? earliest : latest\n    extr.messageTable = messageTable\n  }\n\n  /* Load and render message table\n   ** @returns DOM element generates\n   */\n  async function createMessageTable (date, live) {\n    // debug.log('   createMessageTable for  ' + date)\n    const chatDocument = dateFolder.leafDocumentFromDate(date)\n    try {\n      await store.fetcher.createIfNotExists(chatDocument)\n    } catch (err) {\n      const messageTable = dom.createElement('table')\n      const statusTR = messageTable.appendChild(dom.createElement('tr')) // ### find status in exception\n      if (err.response && err.response.status && err.response.status === 404) {\n        // debug.log('Error 404 for chat file ' + chatDocument)\n        return await renderMessageTable(date, live) // no message file is fine. will be created later\n        // statusTR.appendChild(widgets.errorMessageBlock(dom, 'no message file', 'white'))\n      } else {\n        debug.log('*** Error NON 404 for chat file ' + chatDocument)\n        statusTR.appendChild(widgets.errorMessageBlock(dom, err, 'pink'))\n      }\n      return statusTR\n    }\n    return await renderMessageTable(date, live)\n  }\n\n  async function renderMessageTable (date, live) {\n    const scrollBackbutton = null // was let\n    const scrollForwardButton = null // was let\n\n    /// /////////////////   Scroll down adding more above\n\n    async function extendBackwards () {\n      const done = await insertPreviousMessages(true)\n      if (done) {\n        if (scrollBackbutton) {\n          scrollBackbutton.firstChild.setAttribute(\n            'src',\n            icons.iconBase + 'noun_T-Block_1114655_000000.svg'\n          ) // T\n          scrollBackbutton.disabled = true\n        }\n        messageTable.initial = true\n      } else {\n        messageTable.extendedBack = true\n      }\n      setScrollBackbuttonIcon()\n      return done\n    }\n\n    function setScrollBackbuttonIcon () {\n      if (!scrollBackbutton) {\n        return\n      }\n      const sense = messageTable.extendedBack ? !newestFirst : newestFirst\n      const scrollBackIcon = messageTable.initial\n        ? 'noun_T-Block_1114655_000000.svg'\n        : getScrollbackIcon(sense)\n      scrollBackbutton.firstChild.setAttribute(\n        'src',\n        icons.iconBase + scrollBackIcon\n      )\n\n      function getScrollbackIcon (sense) {\n        return sense ? 'noun_1369241.svg' : 'noun_1369237.svg'\n      }\n    }\n\n    /// ////////////// Scroll up adding more below\n\n    async function extendForwards () {\n      const done = await insertPreviousMessages(false)\n      /*\n      if (done) {\n        scrollForwardButton.firstChild.setAttribute(\n          'src',\n          icons.iconBase + 'noun_T-Block_1114655_000000.svg'\n        )\n        scrollForwardButton.disabled = true\n        messageTable.final = true\n      } else {\n        messageTable.extendedForwards = true\n      }\n      setScrollForwardButtonIcon()\n      */\n      return done\n    }\n\n    function setScrollForwardButtonIcon () {\n      if (!scrollForwardButton) return\n      const sense = messageTable.extendedForwards ? !newestFirst : newestFirst // noun_T-Block_1114657_000000.svg\n      const scrollForwardIcon = messageTable.final\n        ? 'noun_T-Block_1114657_000000.svg'\n        : getScrollForwardButtonIcon(sense)\n      scrollForwardButton.firstChild.setAttribute(\n        'src',\n        icons.iconBase + scrollForwardIcon\n      )\n\n      function getScrollForwardButtonIcon (sense) {\n        return !sense ? 'noun_1369241.svg' : 'noun_1369237.svg'\n      }\n    }\n\n    async function scrollForwardButtonHandler (_event) {\n      if (messageTable.extendedForwards) {\n        removePreviousMessages(false, messageTable)\n        messageTable.extendedForwards = false\n        setScrollForwardButtonIcon()\n      } else {\n        await extendForwards() // async\n        latest.messageTable.scrollIntoView(newestFirst)\n      }\n    }\n\n    /// ///////////////////////\n    /*\n    options = options || {}\n    options.authorDateOnLeft = true\n    const newestFirst = options.newestFirst === '1' || options.newestFirst === true // hack for now\n    const channelObject = new ChatChannel(chatChannel, options)\n    const dateFolder = channelObject.dateFolder\n\n    const div = dom.createElement('div')\n    const statusArea = div.appendChild(dom.createElement('div'))\n    const userContext = { dom, statusArea, div: statusArea } // logged on state, pointers to user's stuff\n\n*/\n    // debug.log('Options for called message Area', options)\n    const messageTable = dom.createElement('table')\n    messageTable.style.width = '100%' // fill the pane div\n    messageTable.extendBackwards = extendBackwards // Make function available to scroll stuff\n    messageTable.extendForwards = extendForwards // Make function available to scroll stuff\n\n    messageTable.date = date\n    const chatDocument = dateFolder.leafDocumentFromDate(date)\n    messageTable.chatDocument = chatDocument\n\n    messageTable.fresh = false\n    messageTable.setAttribute('style', 'width: 100%;') // fill that div!\n    if (live) {\n      messageTable.final = true\n      liveMessageTable = messageTable\n      latest.messageTable = messageTable\n      const tr = renderMessageEditor(channelObject, messageTable, userContext, options)\n      if (newestFirst) {\n        messageTable.insertBefore(tr, messageTable.firstChild) // If newestFirst\n      } else {\n        messageTable.appendChild(tr) // not newestFirst\n      }\n      messageTable.inputRow = tr\n    }\n\n    /// ///// Infinite scroll\n    //\n    // @@ listen for swipe past end event not just button\n    const test = true\n    if (test) { // ws options.infinite but need for non-infinite\n      const titleTR = dom.createElement('tr')\n      const scrollBackbuttonCell = titleTR.appendChild(\n        dom.createElement('td')\n      )\n      // up traingles: noun_1369237.svg\n      // down triangles: noun_1369241.svg\n      /*\n      const scrollBackIcon = newestFirst\n        ? 'noun_1369241.svg'\n        : 'noun_1369237.svg' // down and up arrows respoctively\n      scrollBackbutton = widgets.button(\n        dom,\n        icons.iconBase + scrollBackIcon,\n        'Previous messages ...'\n      )\n      scrollBackbuttonCell.style = 'width:3em; height:3em;'\n      scrollBackbutton.addEventListener('click', scrollBackbuttonHandler, false)\n      messageTable.extendedBack = false\n      scrollBackbuttonCell.appendChild(scrollBackbutton)\n      setScrollBackbuttonIcon()\n      */\n      const dateCell = titleTR.appendChild(dom.createElement('td'))\n      dateCell.style =\n        'text-align: center; vertical-align: middle; color: #888; font-style: italic;'\n      dateCell.textContent = widgets.shortDate(date.toISOString(), true) // no time, only date\n\n      // @@@@@@@@@@@ todo move this button to other end of  message cell, o\n      const scrollForwardButtonCell = titleTR.appendChild(\n        dom.createElement('td')\n      )\n      if (options.includeRemoveButton) {\n        scrollForwardButtonCell.appendChild(widgets.cancelButton(dom, _e => {\n          div.parentNode.removeChild(div)\n        }))\n      }\n      /*\n      const scrollForwardIcon = newestFirst\n        ? 'noun_1369241.svg'\n        : 'noun_1369237.svg' // down and up arrows respoctively\n      scrollForwardButton = widgets.button(\n        dom,\n        icons.iconBase + scrollForwardIcon,\n        'Later messages ...'\n      )\n      scrollForwardButtonCell.appendChild(scrollForwardButton)\n      scrollForwardButtonCell.style = 'width:3em; height:3em;'\n      scrollForwardButton.addEventListener(\n        'click',\n        scrollForwardButtonHandler,\n        false\n      )\n      messageTable.extendedForward = false\n      setScrollForwardButtonIcon()\n      */\n      messageTable.extendedForwards = false\n\n      if (!newestFirst) {\n        // opposite end from the entry field\n        messageTable.insertBefore(titleTR, messageTable.firstChild) // If not newestFirst\n      } else {\n        messageTable.appendChild(titleTR) //  newestFirst\n      }\n    }\n\n    const sts = store.statementsMatching(null, ns.wf('message'), null, chatDocument)\n    if (!live && sts.length === 0) {\n      // not todays\n      // no need buttomns at the moment\n      // messageTable.style.visibility = 'collapse' // Hide files with no messages\n    }\n    for (const st of sts) {\n      await addMessage(st.object, messageTable)\n    }\n    messageTable.fresh = true // message table updated with insertMessageIntoTable()\n    return messageTable\n  } // renderMessageTable\n\n  async function addNewChatDocumentIfNewDay () {\n    // @@ Remove listener from previous table as it is now static\n    const newChatDocument = dateFolder.leafDocumentFromDate(new Date())\n    if (!newChatDocument.sameTerm(latest.messageTable.chatDocument)) {\n      // It is a new day\n      if (liveMessageTable.inputRow) {\n        liveMessageTable.removeChild(liveMessageTable.inputRow)\n        delete liveMessageTable.inputRow\n      }\n      const oldChatDocument = latest.messageTable.chatDocument\n      await appendCurrentMessages()\n      // Adding a link in the document will ping listeners to add the new block too\n      if (\n        !store.holds(\n          oldChatDocument,\n          ns.rdfs('seeAlso'),\n          newChatDocument,\n          oldChatDocument\n        )\n      ) {\n        const sts = [\n          $rdf.st(\n            oldChatDocument,\n            ns.rdfs('seeAlso'),\n            newChatDocument,\n            oldChatDocument\n          )\n        ]\n        try {\n          store.updater.update([], sts)\n        } catch (err) {\n          alert('Unable to link old chat file to new one:' + err)\n        }\n      }\n    }\n  }\n\n  /*\n  function messageCount () {\n    var n = 0\n    const tables = div.children\n    for (let i = 0; i < tables.length; i++) {\n      n += tables[i].children.length - 1\n      // debug.log('    table length:' + tables[i].children.length)\n    }\n    return n\n  }\n*/\n\n  /* Add the live message block with entry field for today\n   */\n  async function appendCurrentMessages () {\n    const now = new Date()\n    const chatDocument = dateFolder.leafDocumentFromDate(now)\n\n    /// ///////////////////////////////////////////////////////////\n    const messageTable = await createMessageTable(now, true)\n    div.appendChild(messageTable)\n    div.refresh = async function () {\n      // only the last messageTable is live\n      await addNewChatDocumentIfNewDay(new Date())\n      await syncMessages(chatChannel, messageTable) // @@ livemessagetable??\n      desktopNotification(chatChannel)\n    } // The short chat version the live update listening is done in the pane but we do it in the widget @@\n    store.updater.addDownstreamChangeListener(chatDocument, div.refresh) // Live update\n    liveMessageTable = messageTable\n    latest.messageTable = liveMessageTable\n    return messageTable\n  }\n\n  async function loadMoreWhereNeeded (event, fixScroll) {\n    if (lock) return\n    lock = true\n    const freeze = !fixScroll\n    const magicZone = 150\n    // const top = div.scrollTop\n    // const bottom = div.scrollHeight - top - div.clientHeight\n    let done\n\n    while (\n      div.scrollTop < magicZone &&\n      earliest.messageTable &&\n      !earliest.messageTable.initial &&\n      earliest.messageTable.extendBackwards\n    ) {\n      // If this has been called before the element is actually in the\n      // user's DOM tree, then this scrollTop check won't work -> loop forever\n      // https://github.com/solidos/solid-ui/issues/366\n      if (div.scrollHeight === 0) {\n        // debug.log('    chat/loadMoreWhereNeeded: trying later...')\n        setTimeout(loadMoreWhereNeeded, 2000) // couple be less\n        lock = false\n        return // abandon now, do later\n      }\n      // debug.log('    chat/loadMoreWhereNeeded: Going now')\n      const scrollBottom = div.scrollHeight - div.scrollTop\n      // debug.log('infinite scroll: adding above: top ' + div.scrollTop)\n      done = await earliest.messageTable.extendBackwards()\n      if (freeze) {\n        div.scrollTop = div.scrollHeight - scrollBottom\n      }\n      if (fixScroll) fixScroll()\n      if (done) break\n    }\n    while (\n      options.selectedMessage && // we started in the middle not at the bottom\n      div.scrollHeight - div.scrollTop - div.clientHeight < magicZone && // we are scrolled right to the bottom\n      latest.messageTable &&\n      !latest.messageTable.final && // there is more data to come\n      latest.messageTable.extendForwards\n    ) {\n      const scrollTop = div.scrollTop\n      /* debug.log(\n        'infinite scroll: adding below: bottom: ' +\n        (div.scrollHeight - div.scrollTop - div.clientHeight)\n      ) */\n      done = await latest.messageTable.extendForwards() // then add more data on the bottom\n      if (freeze) {\n        div.scrollTop = scrollTop // while adding below keep same things in view\n      }\n      if (fixScroll) fixScroll()\n      if (done) break\n    }\n    lock = false\n  }\n\n  async function loadInitialContent () {\n    function yank () {\n      if (selectedMessageTable && selectedMessageTable.selectedElement) {\n        selectedMessageTable.selectedElement.scrollIntoView({ block: 'center' })\n      }\n    }\n\n    // During initial load ONLY keep scroll to selected thing or bottom\n    function fixScroll () {\n      if (options.selectedElement) {\n        options.selectedElement.scrollIntoView({ block: 'center' }) // align tops or bottoms\n      } else {\n        if (liveMessageTable.inputRow.scrollIntoView) {\n          liveMessageTable.inputRow.scrollIntoView(newestFirst) // align tops or bottoms\n        }\n      }\n    }\n\n    let live, selectedDocument, threadRootDocument\n    if (options.selectedMessage) {\n      selectedDocument = options.selectedMessage.doc()\n    }\n    if (threadRootMessage) {\n      threadRootDocument = threadRootMessage.doc()\n    }\n    const initialDocment = selectedDocument || threadRootDocument\n\n    if (initialDocment) {\n      const now = new Date()\n      const todayDocument = dateFolder.leafDocumentFromDate(now)\n      live = todayDocument.sameTerm(initialDocment)\n    }\n\n    let selectedMessageTable\n    if (initialDocment && !live) {\n      const selectedDate = dateFolder.dateFromLeafDocument(initialDocment)\n      selectedMessageTable = await createMessageTable(selectedDate, live)\n      div.appendChild(selectedMessageTable)\n      earliest.messageTable = selectedMessageTable\n      latest.messageTable = selectedMessageTable\n      yank()\n      setTimeout(yank, 1000) // @@ kludge - restore position distubed by other cHANGES\n    } else {\n      // Live end\n      await appendCurrentMessages()\n      earliest.messageTable = liveMessageTable\n      latest.messageTable = liveMessageTable\n    }\n\n    await loadMoreWhereNeeded(null, fixScroll)\n    div.addEventListener('scroll', loadMoreWhereNeeded)\n    if (options.solo) {\n      document.body.addEventListener('scroll', loadMoreWhereNeeded)\n    }\n  }\n\n  // Body of main function\n\n  options = options || {}\n  options.authorDateOnLeft = false // @@ make a user optiosn\n  const newestFirst = options.newestFirst === '1' || options.newestFirst === true // hack for now\n\n  const channelObject = new ChatChannel(chatChannel, options)\n  const dateFolder = channelObject.dateFolder\n\n  const div = dom.createElement('div')\n  channelObject.div = div\n\n  const statusArea = div.appendChild(dom.createElement('div'))\n  const userContext = { dom, statusArea, div: statusArea } // logged on state, pointers to user's stuff\n\n  let liveMessageTable\n  let threadRootMessage\n  const earliest = { messageTable: null } // Stuff about each end of the loaded days\n  const latest = { messageTable: null }\n\n  if (options.thread) {\n    const thread = options.thread\n    threadRootMessage = store.any(null, ns.sioc('has_reply'), thread, thread.doc())\n    if (threadRootMessage) {\n      const threadTime = store.any(threadRootMessage, ns.dct('created'), null, threadRootMessage.doc())\n      if (threadTime) {\n        earliest.limit = new Date(threadTime.value)\n        // debug.log(' infinite: thread start at ' + earliest.limit)\n      }\n    }\n  }\n\n  let lock = false\n\n  await loadInitialContent()\n  return div\n}\n"],"mappings":"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","ignoreList":[]}