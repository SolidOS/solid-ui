{"version":3,"file":"infinite.js","names":["$rdf","_interopRequireWildcard","require","_solidLogic","debug","_iconBase","ns","widgets","_chatLogic","_message","e","t","WeakMap","r","n","__esModule","o","i","f","__proto__","_typeof","has","get","set","_t4","hasOwnProperty","call","Object","defineProperty","getOwnPropertyDescriptor","_createForOfIteratorHelper","Symbol","iterator","Array","isArray","_unsupportedIterableToArray","length","_n","F","s","done","value","TypeError","a","u","next","_arrayLikeToArray","toString","slice","constructor","name","from","test","desktopNotification","str","window","warn","Notification","permission","requestPermission","then","insertMessageIntoTable","_x","_x2","_x3","_x4","_x5","_x6","_insertMessageIntoTable","apply","arguments","_asyncToGenerator2","_regenerator","mark","_callee","channelObject","messageTable","message","fresh","options","userContext","messageRow","ele","newestFirst","dateString","wrap","_context","prev","renderMessageRow","sent","selectedMessage","sameTerm","style","backgroundColor","selectedElement","firstChild","abrupt","newestfirst","AJAR_date","insertBefore","nextSibling","appendChild","stop","infiniteMessageArea","_x7","_x8","_x9","_x0","_infiniteMessageArea","_callee13","dom","wasStore","chatChannel","syncMessages","_syncMessages","addMessage","_addMessage","insertPreviousMessages","_insertPreviousMessages","removePreviousMessages","createMessageTable","_createMessageTable","renderMessageTable","_renderMessageTable","addNewChatDocumentIfNewDay","_addNewChatDocumentIfNewDay","appendCurrentMessages","_appendCurrentMessages","loadMoreWhereNeeded","_loadMoreWhereNeeded","loadInitialContent","_loadInitialContent","dateFolder","div","statusArea","liveMessageTable","threadRootMessage","earliest","latest","thread","threadTime","lock","_context13","_loadInitialContent3","_callee12","yank","fixScroll","live","selectedDocument","threadRootDocument","initialDocment","now","todayDocument","selectedMessageTable","selectedDate","_context12","_fixScroll","scrollIntoView","block","inputRow","_yank","doc","Date","leafDocumentFromDate","dateFromLeafDocument","setTimeout","addEventListener","solo","document","body","_loadInitialContent2","_loadMoreWhereNeeded3","_callee11","event","freeze","magicZone","scrollBottom","scrollTop","_context11","initial","extendBackwards","scrollHeight","clientHeight","extendForwards","_loadMoreWhereNeeded2","_x18","_x19","_appendCurrentMessage2","_callee10","chatDocument","_context10","refresh","_callee1","_context1","store","updater","addDownstreamChangeListener","_appendCurrentMessage","_addNewChatDocumentIf2","_callee0","newChatDocument","oldChatDocument","sts","_context0","removeChild","holds","rdfs","st","update","err","alert","_addNewChatDocumentIf","_renderMessageTable3","_callee9","date","scrollBackbutton","scrollForwardButton","_extendBackwards","setScrollBackbuttonIcon","_extendForwards","setScrollForwardButtonIcon","scrollForwardButtonHandler","_scrollForwardButtonHandler","tr","titleTR","scrollBackbuttonCell","dateCell","scrollForwardButtonCell","_iterator2","_step2","_t3","_context9","_scrollForwardButtonH2","_callee8","_event","_context8","extendedForwards","_scrollForwardButtonH","_x20","_setScrollForwardButt","sense","scrollForwardIcon","getScrollForwardButtonIcon","setAttribute","icons","iconBase","_extendForwards3","_callee7","_context7","_extendForwards2","_setScrollBackbuttonI","extendedBack","scrollBackIcon","getScrollbackIcon","_extendBackwards3","_callee6","_context6","disabled","_extendBackwards2","createElement","width","renderMessageEditor","textContent","shortDate","toISOString","includeRemoveButton","cancelButton","_e","parentNode","statementsMatching","wf","object","finish","_renderMessageTable2","_x16","_x17","_createMessageTable3","_callee5","statusTR","_t2","_context5","fetcher","createIfNotExists","response","status","log","errorMessageBlock","_createMessageTable2","_x14","_x15","_removePreviousMessag","backwards","previousSibling","extr","_insertPreviousMessag2","_callee4","extremity","todayDoc","newMessageTable","_context4","limit","loadPrevious","_insertPreviousMessag","_x13","_addMessage3","_callee3","id","_context3","isDeleted","showDeletedMessages","any","sioc","_addMessage2","_x11","_x12","_syncMessages3","_callee2","displayed","ele2","messages","stored","_iterator","_step","m","_t","_context2","AJAR_subject","uri","each","refreshTree","_syncMessages2","_x1","_x10","authorDateOnLeft","ChatChannel","dct"],"sources":["../../src/chat/infinite.js"],"sourcesContent":["/**\n * Contains the [[infiniteMessageArea]] class\n * @packageDocumentation\n */\n// import { findBookmarkDocument } from './bookmarks'\nimport * as $rdf from 'rdflib' // pull in first avoid cross-refs\nimport { store } from 'solid-logic'\nimport * as debug from '../debug'\nimport { icons } from '../iconBase'\nimport * as ns from '../ns'\n// import * as style from '../style'\n// import * as utils from '../utils'\nimport * as widgets from '../widgets'\n// import * as pad from '../pad'\n// import { DateFolder } from './dateFolder'\nimport { ChatChannel, isDeleted } from './chatLogic'\nimport { renderMessageEditor, renderMessageRow } from './message'\n\n// const UI = { authn, icons, ns, media, pad, $rdf, store, style, utils, widgets }\n\nexport function desktopNotification (str) {\n  // Let's check if the browser supports notifications\n  if (!('Notification' in window)) {\n    debug.warn('This browser does no t support desktop notification')\n  } else if (Notification.permission === 'granted') {\n    // Let's check whether notificatio n permissions have already been granted\n    // eslint-disable-next-line no-new\n    new Notification(str)\n  } else if (Notification.permission !== 'denied') {\n    // Otherwise, we need to ask the user for permission\n    Notification.requestPermission().then(function (permission) {\n      // If the user accepts, let's create a notification\n      if (permission === 'granted') {\n        // eslint-disable-next-line no-new\n        new Notification(str)\n      }\n    })\n  }\n  // At last, if the user has denied notifications, and you\n  // want to be respectful there is no need to bother them any more.\n}\n\n/**\n * Renders a chat message inside a `messageTable`\n */\nexport async function insertMessageIntoTable (channelObject, messageTable, message, fresh, options, userContext) {\n  const messageRow = await renderMessageRow(channelObject,\n    message,\n    fresh,\n    options,\n    userContext\n  )\n\n  // const message = messageRow.AJAR_subject\n  if (options.selectedMessage && options.selectedMessage.sameTerm(message)) {\n    messageRow.style.backgroundColor = 'yellow'\n    options.selectedElement = messageRow\n    messageTable.selectedElement = messageRow\n  }\n\n  let done = false\n  for (let ele = messageTable.firstChild; ; ele = ele.nextSibling) {\n    if (!ele) {\n      // empty\n      break\n    }\n    const newestFirst = options.newestfirst === true\n    const dateString = messageRow.AJAR_date\n    if (\n      (dateString > ele.AJAR_date && newestFirst) ||\n      (dateString < ele.AJAR_date && !newestFirst)\n    ) {\n      messageTable.insertBefore(messageRow, ele)\n      done = true\n      break\n    }\n  }\n  if (!done) {\n    messageTable.appendChild(messageRow)\n  }\n}\n\n/**\n * Common code for a chat (discussion area of messages about something)\n * This version runs over a series of files for different time periods\n *\n * Parameters for the whole chat like its title are stored on\n * index.ttl#this and the chats messages are stored in YYYY/MM/DD/chat.ttl\n *\n * Use to import store as param 2, now ignores it and uses the UI main store\n *\n * Options include:\n\n - shiftEnterSendsMessage: Use shift/enter to send message, Enter to add newline, instead of the reverse.\n - authorDateOnLeft:  Display the author's anme and date of the message in the left column instead of first above the content\n - selectedMessage: Display one message highlighted with the chat around it\n - solo: By itelf on a webpage, so user scroll anywhere in the web page scan scroll the chat.\n - newestFirst: Arrange the chat messages chronologically newest at the top insted of at the bottom\n - infinite:  Use infinite scroll\n - showDeletedMessages: Show messages which have been delted as \"deleted message\". Otherwise hide them.\n - expandImagesInline: If a URI by itself in a message looks like an image URI, replace it with the image\n - inlineImageHeightEms: The height (in ems) of images expaned from their URIs in the chat.\n\n */\nexport async function infiniteMessageArea (dom, wasStore, chatChannel, options) {\n  // ///////////////////////////////////////////////////////////////////////\n\n  async function syncMessages (chatChannel, messageTable) {\n    const displayed = {}\n    let ele, ele2\n    for (ele = messageTable.firstChild; ele; ele = ele.nextSibling) {\n      if (ele.AJAR_subject) {\n        displayed[ele.AJAR_subject.uri] = true\n      }\n    }\n    const messages = store.each(chatChannel, ns.wf('message'), null, messageTable.chatDocument)\n\n    const stored = {}\n    for (const m of messages) {\n      stored[m.uri] = true\n      if (!displayed[m.uri]) {\n        await addMessage(m, messageTable)\n      }\n    }\n\n    for (ele = messageTable.firstChild; ele;) {\n      ele2 = ele.nextSibling\n      if (ele.AJAR_subject && !stored[ele.AJAR_subject.uri]) {\n        messageTable.removeChild(ele)\n      }\n      ele = ele2\n    }\n    for (ele = messageTable.firstChild; ele; ele = ele.nextSibling) {\n      if (ele.AJAR_subject) {\n        // Refresh thumbs up etc\n        widgets.refreshTree(ele) // Things inside may have changed too\n      }\n    }\n  } // syncMessages\n\n  // Called once per original message displayed\n  async function addMessage (message, messageTable) {\n    // const latest = await mostRecentVersion(message)\n    // const content = store.any(latest, ns.sioc('content'))\n    if (isDeleted(message) && !options.showDeletedMessages) {\n      return // ignore deleted messaged -- @@ could also leave a placeholder\n    }\n    /* if (isReplaced(message)) { //\n      return // this is old version\n    } */\n    let thread = store.any(null, ns.sioc('has_member'), message, message.doc())\n    const id = store.any(message, ns.sioc('id'), null, message.doc())\n    if (id && !thread) {\n      thread = store.any(null, ns.sioc('has_member'), id, message.doc())\n    }\n\n    if (options.thread) { // only show things in thread\n      if (store.holds(message, ns.sioc('has_reply'), options.thread)) { // root of thread\n        // debug.log(' addMessage: displaying root of thread ' + thread)\n      } else if (thread && thread.sameTerm(options.thread)) {\n        // debug.log(' addMessage: Displaying body of thread ' + message.uri.slice(-10))\n      } else {\n        // debug.log(' addMessage: Suppress non-thread message in thread table ' + message.uri.slice(-10))\n        return // suppress message not in thread\n      }\n    } else { // Not threads\n      if (thread) {\n        // debug.log(' addMessage: Suppress thread message in non-thread table ' + message.uri.slice(-10))\n        return // supress thread messages in body\n      } else {\n        // debug.log(' addMessage: Normal non-thread message in non-thread table ' + message.uri.slice(-10))\n      }\n    }\n    if (!messageTable.fresh) { // if messageTable has been updated with insertMessageIntoTable() don't do it again\n      // debug.log('@@@ infinite insertMessageIntoTable ' + message) // alain\n      // debug.log('fresh ' + messageTable.fresh)\n      // debug.log(messageTable)\n      await insertMessageIntoTable(channelObject,\n        messageTable,\n        message,\n        messageTable.fresh,\n        options,\n        userContext\n      ) // fresh from elsewhere\n    }\n  }\n\n  /* Add a new messageTable at the top/bottom\n\n   */\n  async function insertPreviousMessages (backwards) {\n    const extremity = backwards ? earliest : latest\n    let date = extremity.messageTable.date // day in mssecs\n\n    // Are we at the top of a thread?\n    if (backwards && earliest.limit && date <= earliest.limit) {\n      if (!liveMessageTable) await appendCurrentMessages() // If necessary skip to today and add that\n      return true // done\n    }\n    // debug.log(' insertPreviousMessages:  loadPrevious given date ' + date)\n\n    date = await dateFolder.loadPrevious(date, backwards) // backwards\n    // debug.log(' insertPreviousMessages:  loadPrevious returns date ' + date)\n\n    /* debug.log(\n      `insertPreviousMessages: from ${\n        backwards ? 'backwards' : 'forwards'\n      } loadPrevious: ${date}`\n    ) */\n    if (!date && !backwards && !liveMessageTable) {\n      await appendCurrentMessages() // If necessary skip to today and add that\n    }\n    if (!date) return true // done\n    let live = false\n    if (!backwards) {\n      const todayDoc = dateFolder.leafDocumentFromDate(new Date())\n      const doc = dateFolder.leafDocumentFromDate(date)\n      live = doc.sameTerm(todayDoc) // Is this todays?\n    }\n    const newMessageTable = await createMessageTable(date, live)\n    extremity.messageTable = newMessageTable // move pointer to earliest\n    if (backwards ? newestFirst : !newestFirst) {\n      // put on bottom or top\n      div.appendChild(newMessageTable)\n    } else {\n      // put on top as we scroll back\n      div.insertBefore(newMessageTable, div.firstChild)\n    }\n    return live // not done\n  }\n\n  /* Remove message tables earlier than this one\n   */\n  function removePreviousMessages (backwards, messageTable) {\n    if (backwards ? newestFirst : !newestFirst) {\n      // it was put on bottom\n      while (messageTable.nextSibling) {\n        div.removeChild(messageTable.nextSibling)\n      }\n    } else {\n      // it was put on top as we scroll back\n      while (messageTable.previousSibling) {\n        div.removeChild(messageTable.previousSibling)\n      }\n    }\n    const extr = backwards ? earliest : latest\n    extr.messageTable = messageTable\n  }\n\n  /* Load and render message table\n   ** @returns DOM element generates\n   */\n  async function createMessageTable (date, live) {\n    // debug.log('   createMessageTable for  ' + date)\n    const chatDocument = dateFolder.leafDocumentFromDate(date)\n    try {\n      await store.fetcher.createIfNotExists(chatDocument)\n    } catch (err) {\n      const messageTable = dom.createElement('table')\n      const statusTR = messageTable.appendChild(dom.createElement('tr')) // ### find status in exception\n      if (err.response && err.response.status && err.response.status === 404) {\n        // debug.log('Error 404 for chat file ' + chatDocument)\n        return await renderMessageTable(date, live) // no message file is fine. will be created later\n        // statusTR.appendChild(widgets.errorMessageBlock(dom, 'no message file', 'white'))\n      } else {\n        debug.log('*** Error NON 404 for chat file ' + chatDocument)\n        statusTR.appendChild(widgets.errorMessageBlock(dom, err, 'pink'))\n      }\n      return statusTR\n    }\n    return await renderMessageTable(date, live)\n  }\n\n  async function renderMessageTable (date, live) {\n    const scrollBackbutton = null // was let\n    const scrollForwardButton = null // was let\n\n    /// /////////////////   Scroll down adding more above\n\n    async function extendBackwards () {\n      const done = await insertPreviousMessages(true)\n      if (done) {\n        if (scrollBackbutton) {\n          scrollBackbutton.firstChild.setAttribute(\n            'src',\n            icons.iconBase + 'noun_T-Block_1114655_000000.svg'\n          ) // T\n          scrollBackbutton.disabled = true\n        }\n        messageTable.initial = true\n      } else {\n        messageTable.extendedBack = true\n      }\n      setScrollBackbuttonIcon()\n      return done\n    }\n\n    function setScrollBackbuttonIcon () {\n      if (!scrollBackbutton) {\n        return\n      }\n      const sense = messageTable.extendedBack ? !newestFirst : newestFirst\n      const scrollBackIcon = messageTable.initial\n        ? 'noun_T-Block_1114655_000000.svg'\n        : getScrollbackIcon(sense)\n      scrollBackbutton.firstChild.setAttribute(\n        'src',\n        icons.iconBase + scrollBackIcon\n      )\n\n      function getScrollbackIcon (sense) {\n        return sense ? 'noun_1369241.svg' : 'noun_1369237.svg'\n      }\n    }\n\n    /// ////////////// Scroll up adding more below\n\n    async function extendForwards () {\n      const done = await insertPreviousMessages(false)\n      /*\n      if (done) {\n        scrollForwardButton.firstChild.setAttribute(\n          'src',\n          icons.iconBase + 'noun_T-Block_1114655_000000.svg'\n        )\n        scrollForwardButton.disabled = true\n        messageTable.final = true\n      } else {\n        messageTable.extendedForwards = true\n      }\n      setScrollForwardButtonIcon()\n      */\n      return done\n    }\n\n    function setScrollForwardButtonIcon () {\n      if (!scrollForwardButton) return\n      const sense = messageTable.extendedForwards ? !newestFirst : newestFirst // noun_T-Block_1114657_000000.svg\n      const scrollForwardIcon = messageTable.final\n        ? 'noun_T-Block_1114657_000000.svg'\n        : getScrollForwardButtonIcon(sense)\n      scrollForwardButton.firstChild.setAttribute(\n        'src',\n        icons.iconBase + scrollForwardIcon\n      )\n\n      function getScrollForwardButtonIcon (sense) {\n        return !sense ? 'noun_1369241.svg' : 'noun_1369237.svg'\n      }\n    }\n\n    async function scrollForwardButtonHandler (_event) {\n      if (messageTable.extendedForwards) {\n        removePreviousMessages(false, messageTable)\n        messageTable.extendedForwards = false\n        setScrollForwardButtonIcon()\n      } else {\n        await extendForwards() // async\n        latest.messageTable.scrollIntoView(newestFirst)\n      }\n    }\n\n    /// ///////////////////////\n    /*\n    options = options || {}\n    options.authorDateOnLeft = true\n    const newestFirst = options.newestFirst === '1' || options.newestFirst === true // hack for now\n    const channelObject = new ChatChannel(chatChannel, options)\n    const dateFolder = channelObject.dateFolder\n\n    const div = dom.createElement('div')\n    const statusArea = div.appendChild(dom.createElement('div'))\n    const userContext = { dom, statusArea, div: statusArea } // logged on state, pointers to user's stuff\n\n*/\n    // debug.log('Options for called message Area', options)\n    const messageTable = dom.createElement('table')\n    messageTable.style.width = '100%' // fill the pane div\n    messageTable.extendBackwards = extendBackwards // Make function available to scroll stuff\n    messageTable.extendForwards = extendForwards // Make function available to scroll stuff\n\n    messageTable.date = date\n    const chatDocument = dateFolder.leafDocumentFromDate(date)\n    messageTable.chatDocument = chatDocument\n\n    messageTable.fresh = false\n    messageTable.setAttribute('style', 'width: 100%;') // fill that div!\n    if (live) {\n      messageTable.final = true\n      liveMessageTable = messageTable\n      latest.messageTable = messageTable\n      const tr = renderMessageEditor(channelObject, messageTable, userContext, options)\n      if (newestFirst) {\n        messageTable.insertBefore(tr, messageTable.firstChild) // If newestFirst\n      } else {\n        messageTable.appendChild(tr) // not newestFirst\n      }\n      messageTable.inputRow = tr\n    }\n\n    /// ///// Infinite scroll\n    //\n    // @@ listen for swipe past end event not just button\n    const test = true\n    if (test) { // ws options.infinite but need for non-infinite\n      const titleTR = dom.createElement('tr')\n      const scrollBackbuttonCell = titleTR.appendChild(\n        dom.createElement('td')\n      )\n      // up traingles: noun_1369237.svg\n      // down triangles: noun_1369241.svg\n      /*\n      const scrollBackIcon = newestFirst\n        ? 'noun_1369241.svg'\n        : 'noun_1369237.svg' // down and up arrows respoctively\n      scrollBackbutton = widgets.button(\n        dom,\n        icons.iconBase + scrollBackIcon,\n        'Previous messages ...'\n      )\n      scrollBackbuttonCell.style = 'width:3em; height:3em;'\n      scrollBackbutton.addEventListener('click', scrollBackbuttonHandler, false)\n      messageTable.extendedBack = false\n      scrollBackbuttonCell.appendChild(scrollBackbutton)\n      setScrollBackbuttonIcon()\n      */\n      const dateCell = titleTR.appendChild(dom.createElement('td'))\n      dateCell.style =\n        'text-align: center; vertical-align: middle; color: #888; font-style: italic;'\n      dateCell.textContent = widgets.shortDate(date.toISOString(), true) // no time, only date\n\n      // @@@@@@@@@@@ todo move this button to other end of  message cell, o\n      const scrollForwardButtonCell = titleTR.appendChild(\n        dom.createElement('td')\n      )\n      if (options.includeRemoveButton) {\n        scrollForwardButtonCell.appendChild(widgets.cancelButton(dom, _e => {\n          div.parentNode.removeChild(div)\n        }))\n      }\n      /*\n      const scrollForwardIcon = newestFirst\n        ? 'noun_1369241.svg'\n        : 'noun_1369237.svg' // down and up arrows respoctively\n      scrollForwardButton = widgets.button(\n        dom,\n        icons.iconBase + scrollForwardIcon,\n        'Later messages ...'\n      )\n      scrollForwardButtonCell.appendChild(scrollForwardButton)\n      scrollForwardButtonCell.style = 'width:3em; height:3em;'\n      scrollForwardButton.addEventListener(\n        'click',\n        scrollForwardButtonHandler,\n        false\n      )\n      messageTable.extendedForward = false\n      setScrollForwardButtonIcon()\n      */\n      messageTable.extendedForwards = false\n\n      if (!newestFirst) {\n        // opposite end from the entry field\n        messageTable.insertBefore(titleTR, messageTable.firstChild) // If not newestFirst\n      } else {\n        messageTable.appendChild(titleTR) //  newestFirst\n      }\n    }\n\n    const sts = store.statementsMatching(null, ns.wf('message'), null, chatDocument)\n    if (!live && sts.length === 0) {\n      // not todays\n      // no need buttomns at the moment\n      // messageTable.style.visibility = 'collapse' // Hide files with no messages\n    }\n    for (const st of sts) {\n      await addMessage(st.object, messageTable)\n    }\n    messageTable.fresh = true // message table updated with insertMessageIntoTable()\n    return messageTable\n  } // renderMessageTable\n\n  async function addNewChatDocumentIfNewDay () {\n    // @@ Remove listener from previous table as it is now static\n    const newChatDocument = dateFolder.leafDocumentFromDate(new Date())\n    if (!newChatDocument.sameTerm(latest.messageTable.chatDocument)) {\n      // It is a new day\n      if (liveMessageTable.inputRow) {\n        liveMessageTable.removeChild(liveMessageTable.inputRow)\n        delete liveMessageTable.inputRow\n      }\n      const oldChatDocument = latest.messageTable.chatDocument\n      await appendCurrentMessages()\n      // Adding a link in the document will ping listeners to add the new block too\n      if (\n        !store.holds(\n          oldChatDocument,\n          ns.rdfs('seeAlso'),\n          newChatDocument,\n          oldChatDocument\n        )\n      ) {\n        const sts = [\n          $rdf.st(\n            oldChatDocument,\n            ns.rdfs('seeAlso'),\n            newChatDocument,\n            oldChatDocument\n          )\n        ]\n        try {\n          store.updater.update([], sts)\n        } catch (err) {\n          alert('Unable to link old chat file to new one:' + err)\n        }\n      }\n    }\n  }\n\n  /*\n  function messageCount () {\n    var n = 0\n    const tables = div.children\n    for (let i = 0; i < tables.length; i++) {\n      n += tables[i].children.length - 1\n      // debug.log('    table length:' + tables[i].children.length)\n    }\n    return n\n  }\n*/\n\n  /* Add the live message block with entry field for today\n   */\n  async function appendCurrentMessages () {\n    const now = new Date()\n    const chatDocument = dateFolder.leafDocumentFromDate(now)\n\n    /// ///////////////////////////////////////////////////////////\n    const messageTable = await createMessageTable(now, true)\n    div.appendChild(messageTable)\n    div.refresh = async function () {\n      // only the last messageTable is live\n      await addNewChatDocumentIfNewDay(new Date())\n      await syncMessages(chatChannel, messageTable) // @@ livemessagetable??\n      desktopNotification(chatChannel)\n    } // The short chat version the live update listening is done in the pane but we do it in the widget @@\n    store.updater.addDownstreamChangeListener(chatDocument, div.refresh) // Live update\n    liveMessageTable = messageTable\n    latest.messageTable = liveMessageTable\n    return messageTable\n  }\n\n  async function loadMoreWhereNeeded (event, fixScroll) {\n    if (lock) return\n    lock = true\n    const freeze = !fixScroll\n    const magicZone = 150\n    // const top = div.scrollTop\n    // const bottom = div.scrollHeight - top - div.clientHeight\n    let done\n\n    while (\n      div.scrollTop < magicZone &&\n      earliest.messageTable &&\n      !earliest.messageTable.initial &&\n      earliest.messageTable.extendBackwards\n    ) {\n      // If this has been called before the element is actually in the\n      // user's DOM tree, then this scrollTop check won't work -> loop forever\n      // https://github.com/solidos/solid-ui/issues/366\n      if (div.scrollHeight === 0) {\n        // debug.log('    chat/loadMoreWhereNeeded: trying later...')\n        setTimeout(loadMoreWhereNeeded, 2000) // couple be less\n        lock = false\n        return // abandon now, do later\n      }\n      // debug.log('    chat/loadMoreWhereNeeded: Going now')\n      const scrollBottom = div.scrollHeight - div.scrollTop\n      // debug.log('infinite scroll: adding above: top ' + div.scrollTop)\n      done = await earliest.messageTable.extendBackwards()\n      if (freeze) {\n        div.scrollTop = div.scrollHeight - scrollBottom\n      }\n      if (fixScroll) fixScroll()\n      if (done) break\n    }\n    while (\n      options.selectedMessage && // we started in the middle not at the bottom\n      div.scrollHeight - div.scrollTop - div.clientHeight < magicZone && // we are scrolled right to the bottom\n      latest.messageTable &&\n      !latest.messageTable.final && // there is more data to come\n      latest.messageTable.extendForwards\n    ) {\n      const scrollTop = div.scrollTop\n      /* debug.log(\n        'infinite scroll: adding below: bottom: ' +\n        (div.scrollHeight - div.scrollTop - div.clientHeight)\n      ) */\n      done = await latest.messageTable.extendForwards() // then add more data on the bottom\n      if (freeze) {\n        div.scrollTop = scrollTop // while adding below keep same things in view\n      }\n      if (fixScroll) fixScroll()\n      if (done) break\n    }\n    lock = false\n  }\n\n  async function loadInitialContent () {\n    function yank () {\n      if (selectedMessageTable && selectedMessageTable.selectedElement) {\n        selectedMessageTable.selectedElement.scrollIntoView({ block: 'center' })\n      }\n    }\n\n    // During initial load ONLY keep scroll to selected thing or bottom\n    function fixScroll () {\n      if (options.selectedElement) {\n        options.selectedElement.scrollIntoView({ block: 'center' }) // align tops or bottoms\n      } else {\n        if (liveMessageTable.inputRow.scrollIntoView) {\n          liveMessageTable.inputRow.scrollIntoView(newestFirst) // align tops or bottoms\n        }\n      }\n    }\n\n    let live, selectedDocument, threadRootDocument\n    if (options.selectedMessage) {\n      selectedDocument = options.selectedMessage.doc()\n    }\n    if (threadRootMessage) {\n      threadRootDocument = threadRootMessage.doc()\n    }\n    const initialDocment = selectedDocument || threadRootDocument\n\n    if (initialDocment) {\n      const now = new Date()\n      const todayDocument = dateFolder.leafDocumentFromDate(now)\n      live = todayDocument.sameTerm(initialDocment)\n    }\n\n    let selectedMessageTable\n    if (initialDocment && !live) {\n      const selectedDate = dateFolder.dateFromLeafDocument(initialDocment)\n      selectedMessageTable = await createMessageTable(selectedDate, live)\n      div.appendChild(selectedMessageTable)\n      earliest.messageTable = selectedMessageTable\n      latest.messageTable = selectedMessageTable\n      yank()\n      setTimeout(yank, 1000) // @@ kludge - restore position distubed by other cHANGES\n    } else {\n      // Live end\n      await appendCurrentMessages()\n      earliest.messageTable = liveMessageTable\n      latest.messageTable = liveMessageTable\n    }\n\n    await loadMoreWhereNeeded(null, fixScroll)\n    div.addEventListener('scroll', loadMoreWhereNeeded)\n    if (options.solo) {\n      document.body.addEventListener('scroll', loadMoreWhereNeeded)\n    }\n  }\n\n  // Body of main function\n\n  options = options || {}\n  options.authorDateOnLeft = false // @@ make a user optiosn\n  const newestFirst = options.newestFirst === '1' || options.newestFirst === true // hack for now\n\n  const channelObject = new ChatChannel(chatChannel, options)\n  const dateFolder = channelObject.dateFolder\n\n  const div = dom.createElement('div')\n  channelObject.div = div\n\n  const statusArea = div.appendChild(dom.createElement('div'))\n  const userContext = { dom, statusArea, div: statusArea } // logged on state, pointers to user's stuff\n\n  let liveMessageTable\n  let threadRootMessage\n  const earliest = { messageTable: null } // Stuff about each end of the loaded days\n  const latest = { messageTable: null }\n\n  if (options.thread) {\n    const thread = options.thread\n    threadRootMessage = store.any(null, ns.sioc('has_reply'), thread, thread.doc())\n    if (threadRootMessage) {\n      const threadTime = store.any(threadRootMessage, ns.dct('created'), null, threadRootMessage.doc())\n      if (threadTime) {\n        earliest.limit = new Date(threadTime.value)\n        // debug.log(' infinite: thread start at ' + earliest.limit)\n      }\n    }\n  }\n\n  let lock = false\n\n  await loadInitialContent()\n  return div\n}\n"],"mappings":"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","ignoreList":[]}