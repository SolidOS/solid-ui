{"version":3,"sources":["../src/table.js"],"names":["UI","icons","require","log","ns","store","widgets","utils","$rdf","module","exports","renderTableViewPane","doc","options","sourceDocument","tableClass","givenQuery","query","RDFS_LITERAL","kb","rowsLookup","FORBIDDEN_COLUMNS","XSD_NUMBER_TYPES","XSD_DATE_TYPES","IMAGE_TYPES","keyVariable","subjectIdCounter","allType","types","typeSelectorDiv","addColumnDiv","lastQuery","mostCommonType","resultDiv","createElement","className","appendChild","generateControlBar","tableDiv","refresh","runQuery","table","logicalRows","columns","renderTableForQuery","s","calculateTable","generateTypeSelector","getMostCommonType","buildFilteredTable","result","setAttribute","tr","addSelectToQuery","type","selectedColumns","getColumns","i","length","variable","vars","push","setVariable","addWhereToQuery","rowVar","queryType","pat","add","rdf","addColumnsToQuery","column","formula","predicate","getVariable","optional","generateQuery","Query","slice","clearElement","generateColumnAddDropdown","updateTable","running","htmlTable","element","childNodes","removeChild","SubjectType","allColumns","useCount","getAllColumns","getUnusedColumns","indexOf","addColumn","removeColumn","filter","x","getLabel","label","addUse","Column","checkedAnyValues","possiblyLiteral","possiblyNumber","constraints","checkValue","term","termType","literalValue","value","match","getKey","toString","sameTerm","superClass","setPredicate","inverse","other","concat","each","rdfs","alternatives","undefined","getConstraints","filterFunction","sortKey","toLowerCase","isImageColumn","uri","objectToArray","obj","property","optionElement","createTextNode","dropdown","addEventListener","typeSelectorChanged","selectedType","unusedColumns","sort","a","b","aLabel","bLabel","columnIndex","Number","getColumnForPredicate","getTypeForObject","subjectType","discoverTypes","subjectList","statementsMatching","subjects","object","typeObj","subject","getSubjectProperties","properties","j","identifyColumnsForType","predicateUri","allColumnsList","sortColumns","typeUrl","sortFunction","renderColumnDeleteButton","button","renderTableHeader","linkTd","th","applyColumnSort","rows","reverse","columnKey","row1","row2","row1Value","row2Value","values","parentTable","_htmlRow","parentNode","applyColumnFiltersToRow","row","rowDisplayed","c","columnValue","htmlRow","style","display","applyColumnFilters","r","literalSort","literalToString","colValue","literalCompare","value1","value2","strValue1","strValue2","renderLiteralSelector","textBox","width","sort1","sort2","substring","renderEnumSelector","list","doMultiple","searchValue","initialSelection","getHints","ele","selected","opt","option","index","renderNumberSelector","minSelector","maxSelector","min","max","eventListener","fallbackRenderTableSelector","renderTableSelector","cs","range","choices","owl","elements","renderTableSelectors","td","selector","linkTo","linkText","hints","linkFunction","openHrefInOutlineMode","e","preventDefault","stopPropagation","target","getTarget","getAttribute","console","linkToObject","renderImage","height","toNT","renderValue","cellFormat","shortDate","datatype","span","textContent","map","lastChild","renderTableRowInto","_downstream","_subject","orig","objects","different","originalValues","background","valueInList","key","updateRow","needUpdate","getSubjectId","_subject_id","startTime","Date","now","progressMessage","original","onResult","rowKey","rowKeyId","onDone","elapsedTimeMS","splice","inferColumnsFromFormula","debug","statements","statement","inferColumns","queryVar","bestCount","best","typeUri"],"mappings":"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","sourcesContent":["// Table Widget: Format an array of RDF statements as an HTML table.\r\n//\r\n// This can operate in one of three modes: when the class of object is given\r\n// or when the source document from whuch data is taken is given,\r\n// or if a prepared query object is given.\r\n// (In principle it could operate with neither class nor document\r\n// given but typically\r\n// there would be too much data.)\r\n// When the tableClass is not given, it looks for common  classes in the data,\r\n// and gives the user the option.\r\n//\r\n// 2008 Written, Ilaria Liccardi  as the tableViewPane.js\r\n// 2014 Core table widget moved into common/table.js - timbl\r\n//\r\n\r\nvar UI = {\r\n  icons: require('./iconBase'),\r\n  log: require('./log'),\r\n  ns: require('./ns'),\r\n  store: require('./store'),\r\n  widgets: require('./widgets')\r\n}\r\n\r\nconst utils = require('./utils')\r\nconst $rdf = require('rdflib')\r\n\r\n// UI.widgets.renderTableViewPane\r\nmodule.exports = function renderTableViewPane (doc, options) {\r\n  var sourceDocument = options.sourceDocument\r\n  var tableClass = options.tableClass\r\n  var givenQuery = options.query\r\n\r\n  var RDFS_LITERAL = 'http://www.w3.org/2000/01/rdf-schema#Literal'\r\n  var ns = UI.ns\r\n  var kb = UI.store\r\n  var rowsLookup = {} //  Persistent mapping of subject URI to dom TR\r\n\r\n  // Predicates that are never made into columns:\r\n\r\n  var FORBIDDEN_COLUMNS = {\r\n    'http://www.w3.org/2002/07/owl#sameAs': true,\r\n    'http://www.w3.org/1999/02/22-rdf-syntax-ns#type': true\r\n  }\r\n\r\n  // Number types defined in the XML schema:\r\n\r\n  var XSD_NUMBER_TYPES = {\r\n    'http://www.w3.org/2001/XMLSchema#decimal': true,\r\n    'http://www.w3.org/2001/XMLSchema#float': true,\r\n    'http://www.w3.org/2001/XMLSchema#double': true,\r\n    'http://www.w3.org/2001/XMLSchema#integer': true,\r\n    'http://www.w3.org/2001/XMLSchema#nonNegativeInteger': true,\r\n    'http://www.w3.org/2001/XMLSchema#positiveInteger': true,\r\n    'http://www.w3.org/2001/XMLSchema#nonPositiveInteger': true,\r\n    'http://www.w3.org/2001/XMLSchema#negativeInteger': true,\r\n    'http://www.w3.org/2001/XMLSchema#long': true,\r\n    'http://www.w3.org/2001/XMLSchema#int': true,\r\n    'http://www.w3.org/2001/XMLSchema#short': true,\r\n    'http://www.w3.org/2001/XMLSchema#byte': true,\r\n    'http://www.w3.org/2001/XMLSchema#unsignedLong': true,\r\n    'http://www.w3.org/2001/XMLSchema#unsignedInt': true,\r\n    'http://www.w3.org/2001/XMLSchema#unsignedShort': true,\r\n    'http://www.w3.org/2001/XMLSchema#unsignedByte': true\r\n  }\r\n\r\n  var XSD_DATE_TYPES = {\r\n    'http://www.w3.org/2001/XMLSchema#dateTime': true,\r\n    'http://www.w3.org/2001/XMLSchema#date': true\r\n  }\r\n\r\n  // Classes that indicate an image:\r\n\r\n  var IMAGE_TYPES = {\r\n    'http://xmlns.com/foaf/0.1/Image': true,\r\n    'http://purl.org/dc/terms/Image': true\r\n  }\r\n\r\n  // Name of the column used as a \"key\" value to look up the row.\r\n  // This is necessary because in the normal view, the columns are\r\n  // all \"optional\" values, meaning that we will get a result set\r\n  // for every individual value that is found.  The row key acts\r\n  // as an anchor that can be used to combine this information\r\n  // back into the same row.\r\n\r\n  var keyVariable = options.keyVariable || '?_row'\r\n\r\n  var subjectIdCounter = 0\r\n  var allType, types\r\n  var typeSelectorDiv, addColumnDiv\r\n\r\n  // The last SPARQL query used:\r\n  var lastQuery = null\r\n  var mostCommonType = null\r\n\r\n  var resultDiv = doc.createElement('div')\r\n  resultDiv.className = 'tableViewPane'\r\n\r\n  resultDiv.appendChild(generateControlBar()) // sets typeSelectorDiv\r\n\r\n  var tableDiv = doc.createElement('div')\r\n  resultDiv.appendChild(tableDiv)\r\n\r\n  // Save a refresh function for use by caller\r\n  resultDiv.refresh = function () {\r\n    runQuery(table.query, table.logicalRows, table.columns, table)\r\n    // updateTable(givenQuery, mostCommonType) // This could be a lot more incremental and efficient\r\n  }\r\n\r\n  // A specifically asked-for query\r\n  if (givenQuery) {\r\n    var table = renderTableForQuery(givenQuery)\r\n    // lastQuery = givenQuery\r\n    tableDiv.appendChild(table)\r\n  } else {\r\n    // Find the most common type and select it by default\r\n\r\n    var s = calculateTable()\r\n    allType = s[0]\r\n    types = s[1]\r\n    if (!tableClass) {\r\n      typeSelectorDiv.appendChild(generateTypeSelector(allType, types))\r\n    }\r\n\r\n    mostCommonType = getMostCommonType(types)\r\n\r\n    if (mostCommonType) {\r\n      buildFilteredTable(mostCommonType)\r\n    } else {\r\n      buildFilteredTable(allType)\r\n    }\r\n  }\r\n  return resultDiv\r\n\r\n  // /////////////////////////////////////////////////////////////////\r\n  /*\r\n  function closeDialog (dialog) {\r\n    dialog.parentNode.removeChild(dialog)\r\n  }\r\n\r\n  function createActionButton (label, callback) {\r\n    var button = doc.createElement('input')\r\n    button.setAttribute('type', 'submit')\r\n    button.setAttribute('value', label)\r\n    button.addEventListener('click', callback, false)\r\n    return button\r\n  }\r\n// @@ Tdo:  put these  buttonsback in,\r\n// to allow user to see and edit and save the sparql query for the table they are looking at\r\n//\r\n\r\n  function createSparqlWindow () {\r\n    var dialog = doc.createElement('div')\r\n\r\n    dialog.setAttribute('class', 'sparqlDialog')\r\n\r\n    var title = doc.createElement('h3')\r\n    title.appendChild(doc.createTextNode('Edit SPARQL query'))\r\n\r\n    var inputbox = doc.createElement('textarea')\r\n    inputbox.value = $rdf.queryToSPARQL(lastQuery)\r\n\r\n    dialog.appendChild(title)\r\n    dialog.appendChild(inputbox)\r\n\r\n    dialog.appendChild(createActionButton('Query', function () {\r\n      var query = $rdf.SPARQLToQuery(inputbox.value)\r\n      updateTable(query)\r\n      closeDialog(dialog)\r\n    }))\r\n\r\n    dialog.appendChild(createActionButton('Close', function () {\r\n      closeDialog(dialog)\r\n    }))\r\n\r\n    return dialog\r\n  }\r\n\r\n  function sparqlButtonPressed () {\r\n    var dialog = createSparqlWindow()\r\n\r\n    resultDiv.appendChild(dialog)\r\n  }\r\n\r\n  function generateSparqlButton () {\r\n    var image = doc.createElement('img')\r\n    image.setAttribute('class', 'sparqlButton')\r\n    image.setAttribute('src', UI.iconBase + 'icons/1pt5a.gif')\r\n    image.setAttribute('alt', 'Edit SPARQL query')\r\n\r\n    image.addEventListener('click', sparqlButtonPressed, false)\r\n\r\n    return image\r\n  }\r\n*/\r\n  // Generate the control bar displayed at the top of the screen.\r\n\r\n  function generateControlBar () {\r\n    var result = doc.createElement('table')\r\n    result.setAttribute('class', 'toolbar')\r\n\r\n    var tr = doc.createElement('tr')\r\n\r\n    /*             @@    Add in later -- not debugged yet\r\n            var sparqlButtonDiv = doc.createElement(\"td\")\r\n            sparqlButtonDiv.appendChild(generateSparqlButton())\r\n            tr.appendChild(sparqlButtonDiv)\r\n    */\r\n    typeSelectorDiv = doc.createElement('td')\r\n    tr.appendChild(typeSelectorDiv)\r\n\r\n    addColumnDiv = doc.createElement('td')\r\n    tr.appendChild(addColumnDiv)\r\n\r\n    result.appendChild(tr)\r\n\r\n    return result\r\n  }\r\n\r\n  // Add the SELECT details to the query being built.\r\n\r\n  function addSelectToQuery (query, type) {\r\n    var selectedColumns = type.getColumns()\r\n\r\n    for (let i = 0; i < selectedColumns.length; ++i) {\r\n      // TODO: autogenerate nicer names for variables\r\n      // variables have to be unambiguous\r\n\r\n      var variable = kb.variable('_col' + i)\r\n\r\n      query.vars.push(variable)\r\n      selectedColumns[i].setVariable(variable)\r\n    }\r\n  }\r\n\r\n  // Add WHERE details to the query being built.\r\n\r\n  function addWhereToQuery (query, rowVar, type) {\r\n    var queryType = type.type\r\n\r\n    if (!queryType) {\r\n      queryType = kb.variable('_any')\r\n    }\r\n\r\n    // _row a type\r\n    query.pat.add(rowVar, UI.ns.rdf('type'), queryType)\r\n  }\r\n\r\n  // Generate OPTIONAL column selectors.\r\n\r\n  function addColumnsToQuery (query, rowVar, type) {\r\n    var selectedColumns = type.getColumns()\r\n\r\n    for (let i = 0; i < selectedColumns.length; ++i) {\r\n      var column = selectedColumns[i]\r\n\r\n      var formula = kb.formula()\r\n\r\n      formula.add(rowVar, column.predicate, column.getVariable())\r\n\r\n      query.pat.optional.push(formula)\r\n    }\r\n  }\r\n\r\n  // Generate a query object from the currently-selected type\r\n  // object.\r\n\r\n  function generateQuery (type) {\r\n    var query = new $rdf.Query()\r\n    var rowVar = kb.variable(keyVariable.slice(1)) // don't pass '?'\r\n\r\n    addSelectToQuery(query, type)\r\n    addWhereToQuery(query, rowVar, type)\r\n    addColumnsToQuery(query, rowVar, type)\r\n\r\n    return query\r\n  }\r\n\r\n  // Build the contents of the tableDiv element, filtered according\r\n  // to the specified type.\r\n\r\n  function buildFilteredTable (type) {\r\n    // Generate \"add column\" cell.\r\n\r\n    clearElement(addColumnDiv)\r\n    addColumnDiv.appendChild(generateColumnAddDropdown(type))\r\n\r\n    var query = generateQuery(type)\r\n\r\n    updateTable(query, type)\r\n  }\r\n\r\n  function updateTable (query, type) {\r\n    // Stop the previous query from doing any updates.\r\n\r\n    if (lastQuery) {\r\n      lastQuery.running = false\r\n    }\r\n\r\n    // Render the HTML table.\r\n\r\n    var htmlTable = renderTableForQuery(query, type)\r\n\r\n    // Clear the tableDiv element, and replace with the new table.\r\n\r\n    clearElement(tableDiv)\r\n    tableDiv.appendChild(htmlTable)\r\n\r\n    // Save the query for the edit dialog.\r\n\r\n    lastQuery = query\r\n  }\r\n\r\n  // Remove all subelements of the specified element.\r\n\r\n  function clearElement (element) {\r\n    while (element.childNodes.length > 0) {\r\n      element.removeChild(element.childNodes[0])\r\n    }\r\n  }\r\n\r\n  // A SubjectType is created for each rdf:type discovered.\r\n\r\n  function SubjectType (type) {\r\n    this.type = type\r\n    this.columns = null\r\n    this.allColumns = null\r\n    this.useCount = 0\r\n\r\n    // Get a list of all columns used by this type.\r\n\r\n    this.getAllColumns = function () {\r\n      return this.allColumns\r\n    }\r\n\r\n    // Get a list of the current columns used by this type\r\n    // (subset of allColumns)\r\n\r\n    this.getColumns = function () {\r\n      // The first time through, get a list of all the columns\r\n      // and select only the six most popular columns.\r\n\r\n      if (!this.columns) {\r\n        var allColumns = this.getAllColumns()\r\n        this.columns = allColumns.slice(0, 7)\r\n      }\r\n\r\n      return this.columns\r\n    }\r\n\r\n    // Get a list of unused columns\r\n\r\n    this.getUnusedColumns = function () {\r\n      var allColumns = this.getAllColumns()\r\n      var columns = this.getColumns()\r\n\r\n      var result = []\r\n\r\n      for (let i = 0; i < allColumns.length; ++i) {\r\n        if (columns.indexOf(allColumns[i]) === -1) {\r\n          result.push(allColumns[i])\r\n        }\r\n      }\r\n\r\n      return result\r\n    }\r\n\r\n    this.addColumn = function (column) {\r\n      this.columns.push(column)\r\n    }\r\n\r\n    this.removeColumn = function (column) {\r\n      this.columns = this.columns.filter(function (x) {\r\n        return x !== column\r\n      })\r\n    }\r\n\r\n    this.getLabel = function () {\r\n      return utils.label(this.type)\r\n    }\r\n\r\n    this.addUse = function () {\r\n      this.useCount += 1\r\n    }\r\n  }\r\n\r\n  // Class representing a column in the table.\r\n\r\n  function Column () {\r\n    this.useCount = 0\r\n\r\n    // Have we checked any values for this column yet?\r\n\r\n    this.checkedAnyValues = false\r\n\r\n    // If the range is unknown, but we just get literals in this\r\n    // column, then we can generate a literal selector.\r\n\r\n    this.possiblyLiteral = true\r\n\r\n    // If the range is unknown, but we just get literals and they\r\n    // match the regular expression for numbers, we can generate\r\n    // a number selector.\r\n\r\n    this.possiblyNumber = true\r\n\r\n    // We accumulate classes which things in the column must be a member of\r\n\r\n    this.constraints = []\r\n\r\n    // Check values as they are read.  If we don't know what the\r\n    // range is, we might be able to infer that it is a literal\r\n    // if all of the values are literals.  Similarly, we might\r\n    // be able to determine if the literal values are actually\r\n    // numbers (using regexps).\r\n\r\n    this.checkValue = function (term) {\r\n      var termType = term.termType\r\n      if (\r\n        this.possiblyLiteral &&\r\n        termType !== 'Literal' &&\r\n        termType !== 'NamedNode'\r\n      ) {\r\n        this.possiblyNumber = false\r\n        this.possiblyLiteral = false\r\n      } else if (this.possiblyNumber) {\r\n        if (termType !== 'Literal') {\r\n          this.possiblyNumber = false\r\n        } else {\r\n          var literalValue = term.value\r\n\r\n          if (!literalValue.match(/^-?\\d+(\\.\\d*)?$/)) {\r\n            this.possiblyNumber = false\r\n          }\r\n        }\r\n      }\r\n\r\n      this.checkedAnyValues = true\r\n    }\r\n\r\n    this.getVariable = function () {\r\n      return this.variable\r\n    }\r\n\r\n    this.setVariable = function (variable) {\r\n      this.variable = variable\r\n    }\r\n\r\n    this.getKey = function () {\r\n      return this.variable.toString()\r\n    }\r\n\r\n    this.addUse = function () {\r\n      this.useCount += 1\r\n    }\r\n\r\n    this.getLabel = function () {\r\n      if (this.predicate) {\r\n        if (this.predicate.sameTerm(ns.rdf('type')) && this.superClass) {\r\n          return utils.label(this.superClass)\r\n        }\r\n        return utils.label(this.predicate)\r\n      } else if (this.variable) {\r\n        return this.variable.toString()\r\n      } else {\r\n        return 'unlabeled column?'\r\n      }\r\n    }\r\n\r\n    this.setPredicate = function (predicate, inverse, other) {\r\n      if (inverse) {\r\n        // variable is in the subject pos\r\n        this.inverse = predicate\r\n        this.constraints = this.constraints.concat(\r\n          kb.each(predicate, UI.ns.rdfs('domain'))\r\n        )\r\n        if (\r\n          predicate.sameTerm(ns.rdfs('subClassOf')) &&\r\n          other.termType === 'NamedNode'\r\n        ) {\r\n          this.superClass = other\r\n          this.alternatives = kb.each(undefined, ns.rdfs('subClassOf'), other)\r\n        }\r\n      } else {\r\n        // variable is the object\r\n        this.predicate = predicate\r\n        this.constraints = this.constraints.concat(\r\n          kb.each(predicate, UI.ns.rdfs('range'))\r\n        )\r\n      }\r\n    }\r\n\r\n    this.getConstraints = function () {\r\n      return this.constraints\r\n    }\r\n\r\n    this.filterFunction = function () {\r\n      return true\r\n    }\r\n\r\n    this.sortKey = function () {\r\n      return this.getLabel().toLowerCase()\r\n    }\r\n\r\n    this.isImageColumn = function () {\r\n      for (let i = 0; i < this.constraints.length; i++) {\r\n        if (this.constraints[i].uri in IMAGE_TYPES) return true\r\n      }\r\n      return false\r\n    }\r\n  }\r\n\r\n  // Convert an object to an array.\r\n\r\n  function objectToArray (obj, filter) {\r\n    var result = []\r\n\r\n    for (const property in obj) {\r\n      // @@@ have to guard against methods\r\n      var value = obj[property]\r\n\r\n      if (!filter || filter(property, value)) {\r\n        result.push(value)\r\n      }\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  // Generate an <option> in a drop-down list.\r\n\r\n  function optionElement (label, value) {\r\n    var result = doc.createElement('option')\r\n\r\n    result.setAttribute('value', value)\r\n    result.appendChild(doc.createTextNode(label))\r\n\r\n    return result\r\n  }\r\n\r\n  // Generate drop-down list box for choosing type of data displayed\r\n\r\n  function generateTypeSelector (allType, types) {\r\n    var resultDiv = doc.createElement('div')\r\n\r\n    resultDiv.appendChild(doc.createTextNode('Select type: '))\r\n\r\n    var dropdown = doc.createElement('select')\r\n\r\n    dropdown.appendChild(optionElement('All types', 'null'))\r\n\r\n    for (const uri in types) {\r\n      dropdown.appendChild(optionElement(types[uri].getLabel(), uri))\r\n    }\r\n\r\n    dropdown.addEventListener(\r\n      'click',\r\n      function () {\r\n        var type\r\n\r\n        if (dropdown.value === 'null') {\r\n          type = allType\r\n        } else {\r\n          type = types[dropdown.value]\r\n        }\r\n\r\n        typeSelectorChanged(type)\r\n      },\r\n      false\r\n    )\r\n\r\n    resultDiv.appendChild(dropdown)\r\n\r\n    return resultDiv\r\n  }\r\n\r\n  // Callback invoked when the type selector drop-down list is changed.\r\n\r\n  function typeSelectorChanged (selectedType) {\r\n    buildFilteredTable(selectedType)\r\n  }\r\n\r\n  // Build drop-down list to add a new column\r\n\r\n  function generateColumnAddDropdown (type) {\r\n    var resultDiv = doc.createElement('div')\r\n\r\n    var unusedColumns = type.getUnusedColumns()\r\n\r\n    unusedColumns.sort(function (a, b) {\r\n      var aLabel = a.sortKey()\r\n      var bLabel = b.sortKey()\r\n      return (aLabel > bLabel) - (aLabel < bLabel)\r\n    })\r\n\r\n    // If there are no unused columns, the div is empty.\r\n\r\n    if (unusedColumns.length > 0) {\r\n      resultDiv.appendChild(doc.createTextNode('Add column: '))\r\n\r\n      // Build dropdown list of unused columns.\r\n\r\n      var dropdown = doc.createElement('select')\r\n\r\n      dropdown.appendChild(optionElement('', '-1'))\r\n\r\n      for (let i = 0; i < unusedColumns.length; ++i) {\r\n        var column = unusedColumns[i]\r\n        dropdown.appendChild(optionElement(column.getLabel(), '' + i))\r\n      }\r\n\r\n      resultDiv.appendChild(dropdown)\r\n\r\n      // Invoke callback when the dropdown is changed, to add\r\n      // the column and reload the table.\r\n\r\n      dropdown.addEventListener(\r\n        'click',\r\n        function () {\r\n          var columnIndex = Number(dropdown.value)\r\n\r\n          if (columnIndex >= 0) {\r\n            type.addColumn(unusedColumns[columnIndex])\r\n            buildFilteredTable(type)\r\n          }\r\n        },\r\n        false\r\n      )\r\n    }\r\n\r\n    return resultDiv\r\n  }\r\n\r\n  // Find the column for a given predicate, creating a new column object\r\n  // if necessary.\r\n\r\n  function getColumnForPredicate (columns, predicate) {\r\n    var column\r\n\r\n    if (predicate.uri in columns) {\r\n      column = columns[predicate.uri]\r\n    } else {\r\n      column = new Column()\r\n      column.setPredicate(predicate)\r\n      columns[predicate.uri] = column\r\n    }\r\n\r\n    return column\r\n  }\r\n\r\n  // Find a type by its URI, creating a new SubjectType object if\r\n  // necessary.\r\n\r\n  function getTypeForObject (types, type) {\r\n    var subjectType\r\n\r\n    if (type.uri in types) {\r\n      subjectType = types[type.uri]\r\n    } else {\r\n      subjectType = new SubjectType(type)\r\n      types[type.uri] = subjectType\r\n    }\r\n\r\n    return subjectType\r\n  }\r\n\r\n  // Discover types and subjects for search.\r\n\r\n  function discoverTypes () {\r\n    // rdf:type properties of subjects, indexed by URI for the type.\r\n\r\n    var types = {}\r\n\r\n    // Get a list of statements that match:  ? rdfs:type ?\r\n    // From this we can get a list of subjects and types.\r\n\r\n    var subjectList = kb.statementsMatching(\r\n      undefined,\r\n      UI.ns.rdf('type'),\r\n      tableClass, // can be undefined OR\r\n      sourceDocument\r\n    ) // can be undefined\r\n\r\n    // Subjects for later lookup.  This is a mapping of type URIs to\r\n    // lists of subjects (it is necessary to record the type of\r\n    // a subject).\r\n\r\n    var subjects = {}\r\n\r\n    for (let i = 0; i < subjectList.length; ++i) {\r\n      var type = subjectList[i].object\r\n\r\n      if (type.termType !== 'NamedNode') {\r\n        // @@ no bnodes?\r\n        continue\r\n      }\r\n\r\n      var typeObj = getTypeForObject(types, type)\r\n\r\n      if (!(type.uri in subjects)) {\r\n        subjects[type.uri] = []\r\n      }\r\n\r\n      subjects[type.uri].push(subjectList[i].subject)\r\n      typeObj.addUse()\r\n    }\r\n\r\n    return [subjects, types]\r\n  }\r\n\r\n  // Get columns for the given subject.\r\n\r\n  function getSubjectProperties (subject, columns) {\r\n    // Get a list of properties of this subject.\r\n\r\n    var properties = kb.statementsMatching(\r\n      subject,\r\n      undefined,\r\n      undefined,\r\n      sourceDocument\r\n    )\r\n\r\n    var result = {}\r\n\r\n    for (let j = 0; j < properties.length; ++j) {\r\n      var predicate = properties[j].predicate\r\n\r\n      if (predicate.uri in FORBIDDEN_COLUMNS) {\r\n        continue\r\n      }\r\n\r\n      // Find/create a column for this predicate.\r\n\r\n      var column = getColumnForPredicate(columns, predicate)\r\n      column.checkValue(properties[j].object)\r\n\r\n      result[predicate.uri] = column\r\n    }\r\n\r\n    return result\r\n  }\r\n\r\n  // Identify the columns associated with a type.\r\n\r\n  function identifyColumnsForType (type, subjects) {\r\n    var allColumns = {}\r\n\r\n    // Process each subject of this type to build up the\r\n    // column list.\r\n\r\n    for (let i = 0; i < subjects.length; ++i) {\r\n      var columns = getSubjectProperties(subjects[i], allColumns)\r\n\r\n      for (const predicateUri in columns) {\r\n        var column = columns[predicateUri]\r\n\r\n        column.addUse()\r\n      }\r\n    }\r\n\r\n    // Generate the columns list\r\n\r\n    var allColumnsList = objectToArray(allColumns)\r\n    sortColumns(allColumnsList)\r\n    type.allColumns = allColumnsList\r\n  }\r\n\r\n  // Build table information from parsing RDF statements.\r\n\r\n  function calculateTable () {\r\n    // Find the types that we will display in the dropdown\r\n    // list box, and associated objects of those types.\r\n\r\n    var subjects, types\r\n\r\n    var s = discoverTypes()\r\n    subjects = s[0]\r\n    types = s[1] // no [ ] on LHS\r\n\r\n    for (const typeUrl in subjects) {\r\n      var subjectList = subjects[typeUrl]\r\n      var type = types[typeUrl]\r\n\r\n      identifyColumnsForType(type, subjectList)\r\n    }\r\n\r\n    // TODO: Special type that captures all rows.\r\n    // Combine columns from all types\r\n\r\n    var allType = new SubjectType(null)\r\n\r\n    return [allType, objectToArray(types)]\r\n  }\r\n\r\n  // Sort the list of columns by the most common columns.\r\n\r\n  function sortColumns (columns) {\r\n    function sortFunction (a, b) {\r\n      return (a.useCount < b.useCount) - (a.useCount > b.useCount)\r\n    }\r\n\r\n    columns.sort(sortFunction)\r\n  }\r\n\r\n  // Create the delete button for a column.\r\n\r\n  function renderColumnDeleteButton (type, column) {\r\n    var button = doc.createElement('a')\r\n\r\n    button.appendChild(doc.createTextNode('[x]'))\r\n\r\n    button.addEventListener(\r\n      'click',\r\n      function () {\r\n        type.removeColumn(column)\r\n        buildFilteredTable(type)\r\n      },\r\n      false\r\n    )\r\n\r\n    return button\r\n  }\r\n\r\n  // Render the table header for the HTML table.\r\n\r\n  function renderTableHeader (columns, type) {\r\n    var tr = doc.createElement('tr')\r\n\r\n    /* Empty header for link column */\r\n    var linkTd = doc.createElement('th')\r\n    tr.appendChild(linkTd)\r\n\r\n    /*\r\n    var labelTd = doc.createElement(\"th\")\r\n    labelTd.appendChild(doc.createTextNode(\"*label*\"))\r\n    tr.appendChild(labelTd)\r\n    */\r\n\r\n    for (let i = 0; i < columns.length; ++i) {\r\n      var th = doc.createElement('th')\r\n      var column = columns[i]\r\n\r\n      th.appendChild(doc.createTextNode(column.getLabel()))\r\n\r\n      // We can only add a delete button if we are using the\r\n      // proper interface and have a type to delete from:\r\n      if (type) {\r\n        th.appendChild(renderColumnDeleteButton(type, column))\r\n      }\r\n\r\n      tr.appendChild(th)\r\n    }\r\n\r\n    return tr\r\n  }\r\n\r\n  // Sort the rows in the rendered table by data from a specific\r\n  // column, using the provided sort function to compare values.\r\n\r\n  function applyColumnSort (rows, column, sortFunction, reverse) {\r\n    var columnKey = column.getKey()\r\n\r\n    // Sort the rows array.\r\n    rows.sort(function (row1, row2) {\r\n      var row1Value = null\r\n      var row2Value = null\r\n\r\n      if (columnKey in row1.values) {\r\n        row1Value = row1.values[columnKey][0]\r\n      }\r\n      if (columnKey in row2.values) {\r\n        row2Value = row2.values[columnKey][0]\r\n      }\r\n\r\n      var result = sortFunction(row1Value, row2Value)\r\n\r\n      if (reverse) {\r\n        return -result\r\n      } else {\r\n        return result\r\n      }\r\n    })\r\n\r\n    // Remove all rows from the table:\r\n\r\n    if (rows.length) {\r\n      var parentTable = rows[0]._htmlRow.parentNode\r\n\r\n      for (let i = 0; i < rows.length; ++i) {\r\n        parentTable.removeChild(rows[i]._htmlRow)\r\n      }\r\n\r\n      // Add back the rows in the new sorted order:\r\n\r\n      for (let i = 0; i < rows.length; ++i) {\r\n        parentTable.appendChild(rows[i]._htmlRow)\r\n      }\r\n    }\r\n  }\r\n\r\n  // Filter the list of rows based on the selectors for the\r\n  // columns.\r\n\r\n  function applyColumnFiltersToRow (row, columns) {\r\n    var rowDisplayed = true\r\n\r\n    // Check the filter functions for every column.\r\n    // The row should only be displayed if the filter functions\r\n    // for all of the columns return true.\r\n\r\n    for (let c = 0; c < columns.length; ++c) {\r\n      var column = columns[c]\r\n      var columnKey = column.getKey()\r\n\r\n      var columnValue = null\r\n\r\n      if (columnKey in row.values) {\r\n        columnValue = row.values[columnKey][0]\r\n      }\r\n\r\n      if (!column.filterFunction(columnValue)) {\r\n        rowDisplayed = false\r\n        break\r\n      }\r\n    }\r\n\r\n    // Show or hide the HTML row according to the result\r\n    // from the filter function.\r\n\r\n    var htmlRow = row._htmlRow\r\n\r\n    if (rowDisplayed) {\r\n      htmlRow.style.display = ''\r\n    } else {\r\n      htmlRow.style.display = 'none'\r\n    }\r\n  }\r\n\r\n  // Filter the list of rows based on the selectors for the\r\n  // columns.\r\n\r\n  function applyColumnFilters (rows, columns) {\r\n    // Apply filterFunction to each row.\r\n\r\n    for (let r = 0; r < rows.length; ++r) {\r\n      var row = rows[r]\r\n      applyColumnFiltersToRow(row, columns)\r\n    }\r\n  }\r\n\r\n  // /////////////////////////////////// Literal column handling\r\n\r\n  // Sort by literal value\r\n\r\n  function literalSort (rows, column, reverse) {\r\n    function literalToString (colValue) {\r\n      if (colValue) {\r\n        if (colValue.termType === 'Literal') {\r\n          return colValue.value.toLowerCase()\r\n        } else if (colValue.termType === 'NamedNode') {\r\n          return utils.label(colValue).toLowerCase()\r\n        }\r\n        return colValue.value.toLowerCase()\r\n      } else {\r\n        return ''\r\n      }\r\n    }\r\n\r\n    function literalCompare (value1, value2) {\r\n      var strValue1 = literalToString(value1)\r\n      var strValue2 = literalToString(value2)\r\n\r\n      if (strValue1 < strValue2) {\r\n        return -1\r\n      } else if (strValue1 > strValue2) {\r\n        return 1\r\n      } else {\r\n        return 0\r\n      }\r\n    }\r\n\r\n    applyColumnSort(rows, column, literalCompare, reverse)\r\n  }\r\n\r\n  // Generates a selector for an RDF literal column.\r\n\r\n  function renderLiteralSelector (rows, columns, column) {\r\n    var result = doc.createElement('div')\r\n\r\n    var textBox = doc.createElement('input')\r\n    textBox.setAttribute('type', 'text')\r\n    textBox.style.width = '70%'\r\n\r\n    result.appendChild(textBox)\r\n\r\n    var sort1 = doc.createElement('span')\r\n    sort1.appendChild(doc.createTextNode('\\u25BC'))\r\n    sort1.addEventListener(\r\n      'click',\r\n      function () {\r\n        literalSort(rows, column, false)\r\n      },\r\n      false\r\n    )\r\n    result.appendChild(sort1)\r\n\r\n    var sort2 = doc.createElement('span')\r\n    sort2.appendChild(doc.createTextNode('\\u25B2'))\r\n    sort2.addEventListener(\r\n      'click',\r\n      function () {\r\n        literalSort(rows, column, true)\r\n      },\r\n      false\r\n    )\r\n    result.appendChild(sort2)\r\n\r\n    var substring = null\r\n\r\n    // Filter the table to show only rows that have a particular\r\n    // substring in the specified column.\r\n\r\n    column.filterFunction = function (colValue) {\r\n      if (!substring) {\r\n        return true\r\n      } else if (!colValue) {\r\n        return false\r\n      } else {\r\n        var literalValue\r\n\r\n        if (colValue.termType === 'Literal') {\r\n          literalValue = colValue.value\r\n        } else if (colValue.termType === 'NamedNode') {\r\n          literalValue = utils.label(colValue)\r\n        } else {\r\n          literalValue = ''\r\n        }\r\n\r\n        return literalValue.toLowerCase().indexOf(substring) >= 0\r\n      }\r\n    }\r\n\r\n    textBox.addEventListener(\r\n      'keyup',\r\n      function () {\r\n        if (textBox.value !== '') {\r\n          substring = textBox.value.toLowerCase()\r\n        } else {\r\n          substring = null\r\n        }\r\n\r\n        applyColumnFilters(rows, columns)\r\n      },\r\n      false\r\n    )\r\n\r\n    return result\r\n  }\r\n\r\n  // ///////////////////////////////////  Enumeration\r\n\r\n  // Generates a dropdown selector for enumeration types include\r\n  //\r\n  //  @param rows,\r\n  //  @param columns, the mapping of predictae URIs to columns\r\n  //  @param column,\r\n  //  @param list,    List of alternative terms\r\n  //\r\n  function renderEnumSelector (rows, columns, column, list) {\r\n    var doMultiple = true\r\n    var result = doc.createElement('div')\r\n    var dropdown = doc.createElement('select')\r\n\r\n    var searchValue = {} // Defualt to all enabled\r\n    for (let i = 0; i < list.length; ++i) {\r\n      var value = list[i]\r\n      searchValue[value.uri] = true\r\n    }\r\n\r\n    var initialSelection = getHints(column).initialSelection\r\n    if (initialSelection) searchValue = initialSelection\r\n\r\n    if (doMultiple) dropdown.setAttribute('multiple', 'true')\r\n    else dropdown.appendChild(optionElement('(All)', '-1'))\r\n\r\n    for (let i = 0; i < list.length; ++i) {\r\n      const value = list[i]\r\n      const ele = optionElement(utils.label(value), i)\r\n      if (searchValue[value.uri]) ele.selected = true\r\n      dropdown.appendChild(ele)\r\n    }\r\n    result.appendChild(dropdown)\r\n\r\n    // Select based on an enum value.\r\n\r\n    column.filterFunction = function (colValue) {\r\n      return !searchValue || (colValue && searchValue[colValue.uri])\r\n    }\r\n\r\n    dropdown.addEventListener(\r\n      'click',\r\n      function () {\r\n        if (doMultiple) {\r\n          searchValue = {}\r\n          const opt = dropdown.options\r\n          for (let i = 0; i < opt.length; i++) {\r\n            const option = opt[i]\r\n            const index = Number(option.value)\r\n            if (opt[i].selected) searchValue[list[index].uri] = true\r\n          }\r\n        } else {\r\n          const index = Number(dropdown.value) // adjusted in Standard tweaks 2018-01\r\n          if (index < 0) {\r\n            searchValue = null\r\n          } else {\r\n            searchValue = {}\r\n            searchValue[list[index].uri] = true\r\n          }\r\n        }\r\n        applyColumnFilters(rows, columns)\r\n      },\r\n      true\r\n    )\r\n\r\n    return result\r\n  }\r\n\r\n  // //////////////////////////////////// Numeric\r\n  //\r\n  // Selector for XSD number types.\r\n\r\n  function renderNumberSelector (rows, columns, column) {\r\n    var result = doc.createElement('div')\r\n\r\n    var minSelector = doc.createElement('input')\r\n    minSelector.setAttribute('type', 'text')\r\n    minSelector.style.width = '40px'\r\n    result.appendChild(minSelector)\r\n\r\n    var maxSelector = doc.createElement('input')\r\n    maxSelector.setAttribute('type', 'text')\r\n    maxSelector.style.width = '40px'\r\n    result.appendChild(maxSelector)\r\n\r\n    // Select based on minimum/maximum limits.\r\n\r\n    var min = null\r\n    var max = null\r\n\r\n    column.filterFunction = function (colValue) {\r\n      if (colValue) {\r\n        colValue = Number(colValue)\r\n      }\r\n\r\n      if (min && (!colValue || colValue < min)) {\r\n        return false\r\n      }\r\n      if (max && (!colValue || colValue > max)) {\r\n        return false\r\n      }\r\n\r\n      return true\r\n    }\r\n\r\n    // When the values in the boxes are changed, update the\r\n    // displayed columns.\r\n\r\n    function eventListener () {\r\n      if (minSelector.value === '') {\r\n        min = null\r\n      } else {\r\n        min = Number(minSelector.value)\r\n      }\r\n\r\n      if (maxSelector.value === '') {\r\n        max = null\r\n      } else {\r\n        max = Number(maxSelector.value)\r\n      }\r\n\r\n      applyColumnFilters(rows, columns)\r\n    }\r\n\r\n    minSelector.addEventListener('keyup', eventListener, false)\r\n    maxSelector.addEventListener('keyup', eventListener, false)\r\n\r\n    return result\r\n  }\r\n\r\n  // /////////////////////////////////////////////////////////////////\r\n\r\n  // Fallback attempts at generating a selector if other attempts fail.\r\n\r\n  function fallbackRenderTableSelector (rows, columns, column) {\r\n    // Have all values matched as numbers?\r\n\r\n    if (column.checkedAnyValues && column.possiblyNumber) {\r\n      return renderNumberSelector(rows, columns, column)\r\n    }\r\n\r\n    // Have all values been literals?\r\n\r\n    if (column.possiblyLiteral) {\r\n      return renderLiteralSelector(rows, columns, column)\r\n    }\r\n\r\n    return null\r\n  }\r\n\r\n  // Render a selector for a given row.\r\n\r\n  function renderTableSelector (rows, columns, column) {\r\n    // What type of data is in this column?  Check the constraints for\r\n    // this predicate.\r\n\r\n    // If this is a class which can be one of various sibling classes?\r\n    if (column.superClass && column.alternatives.length > 0) {\r\n      return renderEnumSelector(rows, columns, column, column.alternatives)\r\n    }\r\n\r\n    var cs = column.getConstraints()\r\n    var range\r\n    for (let i = 0; i < cs.length; i++) {\r\n      range = cs[i]\r\n\r\n      // Is this a number type?\r\n      // Alternatively, is this an rdf:Literal type where all of\r\n      // the values match as numbers?\r\n\r\n      if (\r\n        (column.checkedAnyValues && column.possiblyNumber) ||\r\n        range.uri in XSD_NUMBER_TYPES\r\n      ) {\r\n        return renderNumberSelector(rows, columns, column)\r\n      }\r\n\r\n      // rdf:Literal?  Assume a string at this point\r\n\r\n      if (range.uri === RDFS_LITERAL) {\r\n        return renderLiteralSelector(rows, columns, column)\r\n      }\r\n\r\n      // Is this an enumeration type?\r\n\r\n      // Also  ToDo: @@@ Handle membership of classes whcih are disjointUnions\r\n\r\n      var choices = kb.each(range, UI.ns.owl('oneOf'))\r\n      if (choices.length > 0) {\r\n        return renderEnumSelector(rows, columns, column, choices.elements)\r\n      }\r\n    }\r\n    return fallbackRenderTableSelector(rows, columns, column)\r\n  }\r\n\r\n  // Generate the search selectors for the table columns.\r\n\r\n  function renderTableSelectors (rows, columns) {\r\n    var tr = doc.createElement('tr')\r\n    tr.className = 'selectors'\r\n\r\n    // Empty link column\r\n\r\n    tr.appendChild(doc.createElement('td'))\r\n\r\n    // Generate selectors.\r\n\r\n    for (let i = 0; i < columns.length; ++i) {\r\n      var td = doc.createElement('td')\r\n\r\n      var selector = renderTableSelector(rows, columns, columns[i])\r\n\r\n      if (selector) {\r\n        td.appendChild(selector)\r\n      }\r\n      /*\r\n                  // Useful debug: display URI of predicate in column header\r\n                  if (columns[i].predicate.uri) {\r\n                      td.appendChild(document.createTextNode(columns[i].predicate.uri))\r\n                  }\r\n      */\r\n      tr.appendChild(td)\r\n    }\r\n\r\n    return tr\r\n  }\r\n\r\n  function linkTo (uri, linkText, hints) {\r\n    hints = hints || {}\r\n    var result = doc.createElement('a')\r\n    var linkFunction = hints.linkFunction\r\n    result.setAttribute('href', uri)\r\n    result.appendChild(doc.createTextNode(linkText))\r\n    if (!linkFunction) {\r\n      result.addEventListener('click', UI.widgets.openHrefInOutlineMode, true)\r\n    } else {\r\n      result.addEventListener(\r\n        'click',\r\n        function (e) {\r\n          e.preventDefault()\r\n          e.stopPropagation()\r\n          var target = utils.getTarget(e)\r\n          var uri = target.getAttribute('href')\r\n          if (!uri) console.log('No href found \\n')\r\n          linkFunction(uri)\r\n        },\r\n        true\r\n      )\r\n    }\r\n    return result\r\n  }\r\n\r\n  function linkToObject (obj, hints) {\r\n    var match = false\r\n\r\n    if (obj.uri) {\r\n      match = obj.uri.match(/^mailto:(.*)/)\r\n    }\r\n\r\n    if (match) {\r\n      return linkTo(obj.uri, match[1], hints)\r\n    } else {\r\n      return linkTo(obj.uri, utils.label(obj), hints)\r\n    }\r\n  }\r\n\r\n  // Render an image\r\n\r\n  function renderImage (obj) {\r\n    var result = doc.createElement('img')\r\n    result.setAttribute('src', obj.uri)\r\n\r\n    // Set the height, so it appears as a thumbnail.\r\n    result.style.height = '40px'\r\n    return result\r\n  }\r\n\r\n  // Render an individual RDF object to an HTML object displayed\r\n  // in a table cell.\r\n\r\n  function getHints (column) {\r\n    if (\r\n      options &&\r\n      options.hints &&\r\n      column.variable &&\r\n      options.hints[column.variable.toNT()]\r\n    ) {\r\n      return options.hints[column.variable.toNT()]\r\n    }\r\n    return {}\r\n  }\r\n\r\n  function renderValue (obj, column) {\r\n    // hint\r\n    var hints = getHints(column)\r\n    var cellFormat = hints.cellFormat\r\n    if (cellFormat) {\r\n      switch (cellFormat) {\r\n        case 'shortDate':\r\n          return doc.createTextNode(UI.widgets.shortDate(obj.value))\r\n        // break\r\n        default:\r\n        // drop through\r\n      }\r\n    } else {\r\n      if (obj.termType === 'Literal') {\r\n        if (obj.datatype) {\r\n          if (XSD_DATE_TYPES[obj.datatype.uri]) {\r\n            return doc.createTextNode(UI.widgets.shortDate(obj.value))\r\n          } else if (XSD_NUMBER_TYPES[obj.datatype.uri]) {\r\n            const span = doc.createElement('span')\r\n            span.textContent = obj.value\r\n            span.setAttribute('style', 'text-align: right')\r\n            return span\r\n          }\r\n        }\r\n        return doc.createTextNode(obj.value)\r\n      } else if (obj.termType === 'NamedNode' && column.isImageColumn()) {\r\n        return renderImage(obj)\r\n      } else if (obj.termType === 'NamedNode' || obj.termType === 'BlankNode') {\r\n        return linkToObject(obj, hints)\r\n      } else if (obj.termType === 'Collection') {\r\n        const span = doc.createElement('span')\r\n        span.appendChild(doc.createTextNode('['))\r\n        obj.elements.map(function (x) {\r\n          span.appendChild(renderValue(x, column))\r\n          span.appendChild(doc.createTextNode(', '))\r\n        })\r\n        span.removeChild(span.lastChild)\r\n        span.appendChild(doc.createTextNode(']'))\r\n        return span\r\n      } else {\r\n        return doc.createTextNode(\"unknown termtype '\" + obj.termType + \"'!\")\r\n      }\r\n    }\r\n  }\r\n\r\n  // Render a row of the HTML table, from the given row structure.\r\n  // Note that unlike other functions, this renders into a provided\r\n  // row (<tr>) element.\r\n\r\n  function renderTableRowInto (tr, row, columns, _downstream) {\r\n    /* Link column, for linking to this subject. */\r\n\r\n    var linkTd = doc.createElement('td')\r\n\r\n    if (row._subject && 'uri' in row._subject) {\r\n      linkTd.appendChild(linkTo(row._subject.uri, '\\u2192'))\r\n    }\r\n\r\n    tr.appendChild(linkTd)\r\n\r\n    // Create a <td> for each column (whether the row has data for that\r\n    // column or not).\r\n\r\n    for (let i = 0; i < columns.length; ++i) {\r\n      var column = columns[i]\r\n      var td = doc.createElement('td')\r\n      var orig\r\n\r\n      var columnKey = column.getKey()\r\n\r\n      if (columnKey in row.values) {\r\n        var objects = row.values[columnKey]\r\n        var different = false\r\n        if (row.originalValues && row.originalValues[columnKey]) {\r\n          if (objects.length !== row.originalValues[columnKey].length) {\r\n            different = true\r\n          }\r\n        }\r\n        for (let j = 0; j < objects.length; ++j) {\r\n          var obj = objects[j]\r\n          if (\r\n            row.originalValues &&\r\n            row.originalValues[columnKey] &&\r\n            row.originalValues[columnKey].length > j\r\n          ) {\r\n            orig = row.originalValues[columnKey][j]\r\n            if (obj.toString() !== orig.toString()) {\r\n              different = true\r\n            }\r\n          }\r\n          td.appendChild(renderValue(obj, column))\r\n\r\n          if (j !== objects.length - 1) {\r\n            td.appendChild(doc.createTextNode(',\\n'))\r\n          }\r\n          if (different) {\r\n            td.style.background = '#efe' // green = new changed\r\n          }\r\n        }\r\n      }\r\n\r\n      tr.appendChild(td)\r\n    }\r\n\r\n    // Save a reference to the HTML row in the row object.\r\n\r\n    row._htmlRow = tr\r\n\r\n    return tr\r\n  }\r\n\r\n  // Check if a value is already stored in the list of values for\r\n  // a cell (the query can sometimes find it multiple times)\r\n\r\n  function valueInList (value, list) {\r\n    var key = null\r\n\r\n    if (value.termType === 'Literal') {\r\n      key = 'value'\r\n    } else if (value.termType === 'NamedNode') {\r\n      key = 'uri'\r\n    } else {\r\n      return list.indexOf(value) >= 0\r\n    }\r\n\r\n    // Check the list and compare keys:\r\n\r\n    var i\r\n\r\n    for (i = 0; i < list.length; ++i) {\r\n      if (list[i].termType === value.termType && list[i][key] === value[key]) {\r\n        return true\r\n      }\r\n    }\r\n\r\n    // Not found?\r\n\r\n    return false\r\n  }\r\n\r\n  // Update a row, add new values, and regenerate the HTML element\r\n  // containing the values.\r\n\r\n  function updateRow (row, columns, values) {\r\n    var key\r\n    var needUpdate = false\r\n\r\n    for (key in values) {\r\n      var value = values[key]\r\n\r\n      // If this key is not already in the row, create a new entry\r\n      // for it:\r\n\r\n      if (!(key in row.values)) {\r\n        row.values[key] = []\r\n      }\r\n\r\n      // Possibly add this new value to the list, but don't\r\n      // add it if we have already added it:\r\n\r\n      if (!valueInList(value, row.values[key])) {\r\n        row.values[key].push(value)\r\n        needUpdate = true\r\n      }\r\n    }\r\n\r\n    // Regenerate the HTML row?\r\n\r\n    if (needUpdate) {\r\n      clearElement(row._htmlRow)\r\n      renderTableRowInto(row._htmlRow, row, columns)\r\n    }\r\n    applyColumnFiltersToRow(row, columns) // Hide immediately if nec\r\n  }\r\n\r\n  // Get a unique ID for the given subject.  This is normally the\r\n  // URI; if the subject has no URI, a unique ID is assigned.\r\n\r\n  function getSubjectId (subject) {\r\n    if ('uri' in subject) {\r\n      return subject.uri\r\n    } else if ('_subject_id' in subject) {\r\n      return subject._subject_id\r\n    } else {\r\n      var result = '' + subjectIdCounter\r\n      subject._subject_id = result\r\n      ++subjectIdCounter\r\n      return result\r\n    }\r\n  }\r\n\r\n  // Run a query and populate the table.\r\n  // Populates also an array of logical rows.  This will be empty when the function\r\n  // first returns (as the query is performed in the background)\r\n\r\n  function runQuery (query, rows, columns, table) {\r\n    query.running = true\r\n    var startTime = Date.now()\r\n\r\n    var progressMessage = doc.createElement('tr')\r\n    table.appendChild(progressMessage)\r\n    progressMessage.textContent = 'Loading ...'\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n      rows[i].original = true\r\n      if (!rows[i].originalValues) {\r\n        // remember first set\r\n        rows[i].originalValues = rows[i].values\r\n      }\r\n      rows[i].values = {}\r\n      // oldStyle = rows[i]._htmlRow.getAttribute('style') || ''\r\n      // rows[i]._htmlRow.style.background = '#ffe'; //setAttribute('style', ' background-color: #ffe;')// yellow\r\n    }\r\n\r\n    var onResult = function (values) {\r\n      if (!query.running) {\r\n        return\r\n      }\r\n\r\n      progressMessage.textContent += '.' // give a progress bar\r\n\r\n      var row = null\r\n      var rowKey = null\r\n      var rowKeyId\r\n\r\n      // If the query has a row key, use it to look up the row.\r\n\r\n      if (keyVariable in values) {\r\n        rowKey = values[keyVariable]\r\n        rowKeyId = getSubjectId(rowKey)\r\n\r\n        // Do we have a row for this already?\r\n        // If so, reuse it; otherwise, we must create a new row.\r\n\r\n        if (rowKeyId in rowsLookup) {\r\n          row = rowsLookup[rowKeyId]\r\n        }\r\n      }\r\n\r\n      // Create a new row?\r\n\r\n      if (!row) {\r\n        var tr = doc.createElement('tr')\r\n        table.appendChild(tr)\r\n\r\n        row = {\r\n          _htmlRow: tr,\r\n          _subject: rowKey,\r\n          values: {}\r\n        }\r\n        rows.push(row)\r\n\r\n        if (rowKey) {\r\n          rowsLookup[rowKeyId] = row\r\n        }\r\n      }\r\n\r\n      // Add the new values to this row.\r\n      delete row.original // This is included in the new data\r\n      updateRow(row, columns, values)\r\n    }\r\n\r\n    var onDone = function () {\r\n      if (\r\n        progressMessage &&\r\n        progressMessage.parentNode &&\r\n        progressMessage.parentNode.removeChild\r\n      ) {\r\n        progressMessage.parentNode.removeChild(progressMessage)\r\n        progressMessage = null\r\n      }\r\n\r\n      var elapsedTimeMS = Date.now() - startTime\r\n      console.log(\r\n        'Query done: ' + rows.length + ' rows, ' + elapsedTimeMS + 'ms'\r\n      )\r\n      // Delete rows which were from old values not new\r\n      for (let i = rows.length - 1; i >= 0; i--) {\r\n        // backwards\r\n        if (rows[i].original) {\r\n          console.log('   deleting row ' + rows[i]._subject)\r\n          var tr = rows[i]._htmlRow\r\n          tr.parentNode.removeChild(tr)\r\n          delete rowsLookup[getSubjectId(rows[i]._subject)]\r\n          rows.splice(i, 1)\r\n        }\r\n      }\r\n\r\n      /*\r\n                  for (let i=0; i< rows.length; i++) {\r\n                      rows[i].originalValues = rows[i].values\r\n                      rows[i].values = {}\r\n                      // oldStyle = rows[i]._htmlRow.getAttribute('style') || ''\r\n                      rows[i]._htmlRow.style.background = '#ffe'; //setAttribute('style', ' background-color: #ffe;')//\r\n                      applyColumnFilters(rows, columns); // @@ TBL added this\r\n                      // Here add table clean-up, remove \"loading\" message etc.\r\n                  }\r\n                  */\r\n      if (options.onDone) options.onDone()\r\n    }\r\n    kb.query(query, onResult, undefined, onDone)\r\n  }\r\n\r\n  // Given the formula object which is the query pattern,\r\n  // deduce from where the variable occurs constraints on\r\n  // what values it can take.\r\n\r\n  function inferColumnsFromFormula (columns, formula) {\r\n    UI.log.debug('>> processing formula')\r\n\r\n    for (let i = 0; i < formula.statements.length; ++i) {\r\n      var statement = formula.statements[i]\r\n      // UI.log.debug(\"processing statement \" + i)\r\n\r\n      // Does it match this?:\r\n      // <something> <predicate> ?var\r\n      // If so, we can use the predicate as the predicate for the\r\n      // column used for the specified variable.\r\n\r\n      if (\r\n        statement.predicate.termType === 'NamedNode' &&\r\n        statement.object.termType === 'Variable'\r\n      ) {\r\n        var variable = statement.object.toString()\r\n        if (variable in columns) {\r\n          var column = columns[variable]\r\n          column.setPredicate(statement.predicate, false, statement.subject)\r\n        }\r\n      }\r\n      if (\r\n        statement.predicate.termType === 'NamedNode' &&\r\n        statement.subject.termType === 'Variable'\r\n      ) {\r\n        const variable = statement.subject.toString()\r\n        if (variable in columns) {\r\n          const column = columns[variable]\r\n          column.setPredicate(statement.predicate, true, statement.object)\r\n        }\r\n      }\r\n    }\r\n\r\n    // Apply to OPTIONAL formulas:\r\n\r\n    for (let i = 0; i < formula.optional.length; ++i) {\r\n      UI.log.debug('recurse to optional subformula ' + i)\r\n      inferColumnsFromFormula(columns, formula.optional[i])\r\n    }\r\n\r\n    UI.log.debug('<< finished processing formula')\r\n  }\r\n\r\n  // Generate a list of column structures and infer details about the\r\n  // predicates based on the contents of the query\r\n\r\n  function inferColumns (query) {\r\n    // Generate the columns list:\r\n\r\n    var result = []\r\n    var columns = {}\r\n\r\n    for (let i = 0; i < query.vars.length; ++i) {\r\n      var column = new Column()\r\n      var queryVar = query.vars[i]\r\n      UI.log.debug('column ' + i + ' : ' + queryVar)\r\n\r\n      column.setVariable(queryVar)\r\n      columns[queryVar] = column\r\n      result.push(column)\r\n    }\r\n\r\n    inferColumnsFromFormula(columns, query.pat)\r\n\r\n    return result\r\n  }\r\n\r\n  // Generate a table from a query.\r\n\r\n  function renderTableForQuery (query, type) {\r\n    // infer columns from query, to allow generic queries\r\n    var columns\r\n    if (!givenQuery) {\r\n      columns = type.getColumns()\r\n    } else {\r\n      columns = inferColumns(query)\r\n    }\r\n\r\n    // Start with an empty list of rows; this will be populated\r\n    // by the query.\r\n\r\n    var rows = []\r\n\r\n    // Create table element and header.\r\n\r\n    var table = doc.createElement('table')\r\n\r\n    table.appendChild(renderTableHeader(columns, type))\r\n    table.appendChild(renderTableSelectors(rows, columns))\r\n\r\n    // Run query.  Note that this is perform asynchronously; the\r\n    // query runs in the background and this call does not block.\r\n\r\n    table.logicalRows = rows // Save for refresh\r\n    table.columns = columns\r\n    table.query = query\r\n\r\n    runQuery(query, rows, columns, table)\r\n\r\n    return table\r\n  }\r\n\r\n  // Find the most common type of row\r\n\r\n  function getMostCommonType (types) {\r\n    var bestCount = -1\r\n    var best = null\r\n\r\n    let typeUri\r\n    for (typeUri in types) {\r\n      var type = types[typeUri]\r\n\r\n      if (type.useCount > bestCount) {\r\n        best = type\r\n        bestCount = type.useCount\r\n      }\r\n    }\r\n\r\n    return best\r\n  }\r\n\r\n  // Filter list of columns to only those columns used in the\r\n  // specified rows.\r\n  /*\r\n  function filterColumns (columns, rows) {\r\n    var filteredColumns = {}\r\n\r\n    // Copy columns from \"columns\" -> \"filteredColumns\", but only\r\n    // those columns that are used in the list of rows specified.\r\n\r\n    for (let columnUri in columns) {\r\n      for (let i = 0; i < rows.length; ++i) {\r\n        if (columnUri in rows[i]) {\r\n          filteredColumns[columnUri] = columns[columnUri]\r\n          break\r\n        }\r\n      }\r\n    }\r\n    return filteredColumns\r\n  }\r\n  */\r\n}\r\n// ///////////////////////////////////////////////////////////////////\r\n\r\n// ENDS\r\n"],"file":"table.js"}