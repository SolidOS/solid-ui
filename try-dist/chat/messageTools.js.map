{"version":3,"sources":["../../src/chat/messageTools.js"],"names":["UI","authn","require","icons","log","ns","media","pad","rdf","store","style","utils","widgets","bookmarks","dom","window","document","kb","THUMBS_UP_ICON","THUMBS_DOWN_ICON","updatePromise","del","ins","Promise","resolve","reject","updater","update","uri","ok","errorBody","Error","emoji","schema","sentimentStrip","target","doc","actions","each","sentiments","map","a","any","sort","strings","x","createTextNode","join","sentimentStripLinked","strip","createElement","refresh","innerHTML","forEach","ss","klass","agent","res","setAttribute","textContent","appendChild","messageToolbar","message","messageRow","userContext","div","closeToolbar","parentElement","removeChild","deleteThingThen","connectedStatements","me","currentUser","holds","foaf","deleteButton","deleteButtonWithCheck","renderBookmarksButton","then","bookmarkButton","sentimentButton","context","icon","actionClass","mutuallyExclusive","setColor","button","backgroundColor","action","label","_event","newThing","insertMe","$rdf","st","dirty","i","length","existingAction","refreshTree","filter","context1","iconBase","cancelButton","firstChild","opacity","addEventListener"],"mappings":"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","sourcesContent":["/**\r\n * Tools for doing things with a message\r\n * Let us be creative here.  Allow all sorts of things to\r\n * be done to a message - linking to new or old objects in an open way\r\n *\r\n * Ideas: Bookmark, Like, star, pin at top of chat, reply as new thread,\r\n * If you made it originally: edit, delete, attach\r\n * @packageDocumentation\r\n */\r\n\r\n/* global $rdf */\r\n\r\nconst UI = {\r\n  authn: require('../authn/authn'),\r\n  icons: require('../iconBase'),\r\n  log: require('../log'),\r\n  ns: require('../ns'),\r\n  media: require('../media-capture'),\r\n  pad: require('../pad'),\r\n  rdf: require('rdflib'),\r\n  store: require('../store'),\r\n  style: require('../style'),\r\n  utils: require('../utils'),\r\n  widgets: require('../widgets')\r\n}\r\n\r\nconst bookmarks = require('./bookmarks')\r\n\r\nconst dom = window.document\r\n\r\nconst kb = UI.store\r\nconst ns = UI.ns\r\n// const label = UI.utils.label\r\n\r\n// THE UNUSED ICONS are here as reminders for possible future functionality\r\n// const BOOKMARK_ICON = 'noun_45961.svg'\r\n// const HEART_ICON = 'noun_130259.svg' -> Add this to my (private) favorites\r\n// const MENU_ICON = 'noun_897914.svg'\r\n// const PAPERCLIP_ICON = 'noun_25830.svg' -> add attachments to this message\r\n// const PIN_ICON = 'noun_562340.svg'  -> pin this message permanently in the chat UI\r\n// const PENCIL_ICON = 'noun_253504.svg'\r\n// const SPANNER_ICON = 'noun_344563.svg' -> settings\r\nconst THUMBS_UP_ICON = 'noun_1384132.svg'\r\nconst THUMBS_DOWN_ICON = 'noun_1384135.svg'\r\n\r\n// module.export = { messageTools, sentimentStripLinked, sentimentStrip }\r\n\r\n// @@@@ use the one in rdflib.js when it is avaiable and delete this\r\nfunction updatePromise (del, ins) {\r\n  return new Promise(function (resolve, reject) {\r\n    kb.updater.update(del, ins, function (uri, ok, errorBody) {\r\n      if (!ok) {\r\n        reject(new Error(errorBody))\r\n      } else {\r\n        resolve()\r\n      }\r\n    }) // callback\r\n  }) // promise\r\n}\r\n\r\n/**\r\n * Emoji in Unicode\r\n */\r\n\r\nvar emoji = {}\r\nemoji[ns.schema('AgreeAction')] = '👍'\r\nemoji[ns.schema('DisagreeAction')] = '👎'\r\nemoji[ns.schema('EndorseAction')] = '⭐️'\r\nemoji[ns.schema('LikeAction')] = '❤️'\r\n\r\n/**\r\n * Create strip of sentiments expressed\r\n */\r\nexport function sentimentStrip (target, doc) {\r\n  const actions = kb.each(null, ns.schema('target'), target, doc)\r\n  const sentiments = actions.map(a => kb.any(a, ns.rdf('type'), null, doc))\r\n  sentiments.sort()\r\n  const strings = sentiments.map(x => emoji[x] || '')\r\n  return dom.createTextNode(strings.join(' '))\r\n}\r\n/**\r\n * Create strip of sentiments expressed, with hyperlinks\r\n *\r\n * @param target {NamedNode} - The thing about which they are expressed\r\n * @param doc {NamedNode} - The document in which they are expressed\r\n */\r\nexport function sentimentStripLinked (target, doc) {\r\n  var strip = dom.createElement('span')\r\n  function refresh () {\r\n    strip.innerHTML = ''\r\n    const actions = kb.each(null, ns.schema('target'), target, doc)\r\n    const sentiments = actions.map(a => [\r\n      kb.any(a, ns.rdf('type'), null, doc),\r\n      kb.any(a, ns.schema('agent'), null, doc)\r\n    ])\r\n    sentiments.sort()\r\n    sentiments.forEach(ss => {\r\n      const [klass, agent] = ss\r\n      var res\r\n      if (agent) {\r\n        res = dom.createElement('a')\r\n        res.setAttribute('href', agent.uri)\r\n      } else {\r\n        res = dom.createTextNode('')\r\n      }\r\n      res.textContent = emoji[klass] || '*'\r\n      strip.appendChild(res)\r\n    })\r\n  }\r\n  refresh()\r\n  strip.refresh = refresh\r\n  return strip\r\n}\r\n\r\n/**\r\n * Creates a message toolbar component\r\n */\r\nexport function messageToolbar (message, messageRow, userContext) {\r\n  const div = dom.createElement('div')\r\n  function closeToolbar () {\r\n    div.parentElement.parentElement.removeChild(div.parentElement) // remive the TR\r\n  }\r\n\r\n  async function deleteThingThen (x) {\r\n    await updatePromise(kb.connectedStatements(x), [])\r\n  }\r\n\r\n  // Things only the original author can do\r\n  let me = UI.authn.currentUser() // If already logged on\r\n  if (me && kb.holds(message, ns.foaf('maker'), me)) {\r\n    // button to delete the message\r\n    const deleteButton = UI.widgets.deleteButtonWithCheck(\r\n      dom,\r\n      div,\r\n      'message',\r\n      async function () {\r\n        await kb.updater.update(kb.connectedStatements[message], [])\r\n        closeToolbar()\r\n      }\r\n    )\r\n    div.appendChild(deleteButton)\r\n  } // if mine\r\n\r\n  // Things anyone can do if they have a bookmark list async\r\n  /*\r\n var bookmarkButton = await bookmarks.renderBookmarksButton(userContext)\r\n if (bookmarkButton) {\r\n   div.appendChild(bookmarkButton)\r\n }\r\n */\r\n  // Things anyone can do if they have a bookmark list\r\n\r\n  bookmarks.renderBookmarksButton(userContext).then(bookmarkButton => {\r\n    if (bookmarkButton) div.appendChild(bookmarkButton)\r\n  })\r\n\r\n  /**   Button to allow user to express a sentiment (like, endorse, etc) about a target\r\n   *\r\n   * @param context {Object} - Provide dom and me\r\n   * @param target {NamedNode} - The thing the user expresses an opnion about\r\n   * @param icon {uristring} - The icon to be used for the button\r\n   * @param actionClass {NamedNode} - The RDF class  - typically a subclass of schema:Action\r\n   * @param doc - {NamedNode} - the Solid document iunto which the data should be written\r\n   * @param mutuallyExclusive {Array<NamedNode>} - Any RDF classes of sentimentswhich are mutiually exclusive\r\n   */\r\n  function sentimentButton (\r\n    context,\r\n    target,\r\n    icon,\r\n    actionClass,\r\n    doc,\r\n    mutuallyExclusive\r\n  ) {\r\n    function setColor () {\r\n      button.style.backgroundColor = action ? 'yellow' : 'white'\r\n    }\r\n    var button = UI.widgets.button(\r\n      dom,\r\n      icon,\r\n      UI.utils.label(actionClass),\r\n      async function (_event) {\r\n        if (action) {\r\n          await deleteThingThen(action)\r\n          action = null\r\n          setColor()\r\n        } else {\r\n          // no action\r\n          action = UI.widgets.newThing(doc)\r\n          var insertMe = [\r\n            $rdf.st(action, ns.schema('agent'), context.me, doc),\r\n            $rdf.st(action, ns.rdf('type'), actionClass, doc),\r\n            $rdf.st(action, ns.schema('target'), target, doc)\r\n          ]\r\n          await updatePromise([], insertMe)\r\n          setColor()\r\n\r\n          if (mutuallyExclusive) {\r\n            // Delete incompative sentiments\r\n            var dirty = false\r\n            for (let i = 0; i < mutuallyExclusive.length; i++) {\r\n              const a = existingAction(mutuallyExclusive[i])\r\n              if (a) {\r\n                await deleteThingThen(a) // but how refresh? refreshTree the parent?\r\n                dirty = true\r\n              }\r\n            }\r\n            if (dirty) {\r\n              // UI.widgets.refreshTree(button.parentNode) // requires them all to be immediate siblings\r\n              UI.widgets.refreshTree(messageRow) // requires them all to be immediate siblings\r\n            }\r\n          }\r\n        }\r\n      }\r\n    )\r\n    function existingAction (actionClass) {\r\n      var actions = kb\r\n        .each(null, ns.schema('agent'), context.me, doc)\r\n        .filter(x => kb.holds(x, ns.rdf('type'), actionClass, doc))\r\n        .filter(x => kb.holds(x, ns.schema('target'), target, doc))\r\n      return actions.length ? actions[0] : null\r\n    }\r\n    function refresh () {\r\n      action = existingAction(actionClass)\r\n      setColor()\r\n    }\r\n    var action\r\n    button.refresh = refresh // If the file changes, refresh live\r\n    refresh()\r\n    return button\r\n  }\r\n\r\n  // THUMBS_UP_ICON\r\n  // https://schema.org/AgreeAction\r\n  me = UI.authn.currentUser() // If already logged on\r\n  if (me) {\r\n    // Things you mnust be logged in for\r\n    var context1 = { me, dom, div }\r\n    div.appendChild(\r\n      sentimentButton(\r\n        context1,\r\n        message, // @@ TODO use UI.widgets.sentimentButton\r\n        UI.icons.iconBase + THUMBS_UP_ICON,\r\n        ns.schema('AgreeAction'),\r\n        message.doc(),\r\n        [ns.schema('DisagreeAction')]\r\n      )\r\n    )\r\n    // Thumbs down\r\n    div.appendChild(\r\n      sentimentButton(\r\n        context1,\r\n        message,\r\n        UI.icons.iconBase + THUMBS_DOWN_ICON,\r\n        ns.schema('DisagreeAction'),\r\n        message.doc(),\r\n        [ns.schema('AgreeAction')]\r\n      )\r\n    )\r\n  }\r\n  // X button to remove the tool UI itself\r\n  const cancelButton = div.appendChild(UI.widgets.cancelButton(dom))\r\n  cancelButton.style.float = 'right'\r\n  cancelButton.firstChild.style.opacity = '0.3'\r\n  cancelButton.addEventListener('click', closeToolbar)\r\n  return div\r\n}\r\n"],"file":"messageTools.js"}