{"version":3,"sources":["../src/log.js"],"names":["wrapper","logger","TERROR","TWARN","TMESG","TSUCCESS","TINFO","TDEBUG","TALL","level","ascending","msg","str","type","typestr","document","logArea","getElementById","escapeForXML","replace","addendum","createElement","setAttribute","now","Date","innerHTML","getHours","getMinutes","getSeconds","appendChild","insertBefore","firstChild","console","log","warn","debug","info","error","success","alert","clear","x","setLevel","dumpHTML","l","module","exports"],"mappings":"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","sourcesContent":["// Log of diagnostics -- node module version\r\n\r\n/* global alert */\r\nvar wrapper = function () {\r\n  var logger = {}\r\n\r\n  // ///////////////////////  Logging\r\n  //\r\n  // bitmask levels\r\n  // var TNONE = 0\r\n  var TERROR = 1\r\n  var TWARN = 2\r\n  var TMESG = 4\r\n  var TSUCCESS = 8\r\n  var TINFO = 16\r\n  var TDEBUG = 32\r\n  var TALL = 63\r\n\r\n  logger.level = TERROR + TWARN + TMESG\r\n  logger.ascending = false\r\n\r\n  logger.msg = function (str, type, typestr) {\r\n    if (!type) {\r\n      type = TMESG\r\n      typestr = 'mesg'\r\n    }\r\n\r\n    if (!(logger.level & type)) return // bitmask\r\n\r\n    if (typeof document !== 'undefined') {\r\n      // Not AJAX environment\r\n\r\n      var logArea = document.getElementById('status')\r\n      if (!logArea) return\r\n\r\n      // Local version to reduce dependencies\r\n      var escapeForXML = function (str) {\r\n        // don't use library one in case ithasn't been loaded yet\r\n        return str.replace(/&/g, '&amp;').replace(/</g, '&lt;')\r\n      }\r\n\r\n      var addendum = document.createElement('span')\r\n      addendum.setAttribute('class', typestr)\r\n      var now = new Date()\r\n      addendum.innerHTML =\r\n        now.getHours() +\r\n        ':' +\r\n        now.getMinutes() +\r\n        ':' +\r\n        now.getSeconds() +\r\n        ' [' +\r\n        typestr +\r\n        '] ' +\r\n        escapeForXML(str) +\r\n        '<br/>'\r\n      if (!logger.ascending) {\r\n        logArea.appendChild(addendum)\r\n      } else {\r\n        logArea.insertBefore(addendum, logArea.firstChild)\r\n      }\r\n    } else if (typeof console !== 'undefined') {\r\n      // node.js\r\n      console.log(str)\r\n      /*\r\n    } else {\r\n      var f = dump // || print\r\n      if (!f) throw new Error('log: No way to output message: ' + str)\r\n      f('Log: ' + str + '\\n')\r\n      */\r\n    }\r\n  } // logger.msg\r\n\r\n  logger.warn = function (msg) {\r\n    logger.msg(msg, TWARN, 'warn')\r\n  }\r\n  logger.debug = function (msg) {\r\n    logger.msg(msg, TDEBUG, 'dbug')\r\n  }\r\n  logger.info = function (msg) {\r\n    logger.msg(msg, TINFO, 'info')\r\n  }\r\n  logger.error = function (msg) {\r\n    logger.msg(msg, TERROR, 'eror')\r\n  }\r\n  logger.success = function (msg) {\r\n    logger.msg(msg, TSUCCESS, 'good')\r\n  }\r\n\r\n  if (typeof alert !== 'undefined') {\r\n    logger.alert = alert\r\n  } else {\r\n    logger.alert = logger.warn\r\n  }\r\n\r\n  /** clear the log window **/\r\n  logger.clear = function () {\r\n    var x = document.getElementById('status')\r\n    if (!x) return\r\n    x.innerHTML = ''\r\n    // emptyNode(x);\r\n  } // clearStatus\r\n\r\n  /** set the logging level **/\r\n  logger.setLevel = function (x) {\r\n    logger.level = TALL\r\n    logger.debug('Log level is now ' + x)\r\n    logger.level = x\r\n  }\r\n\r\n  logger.dumpHTML = function () {\r\n    var l = logger.level\r\n    logger.level = TALL\r\n    logger.debug(document.innerHTML)\r\n    logger.level = l\r\n  }\r\n  return logger\r\n} // wrapper\r\n\r\nmodule.exports = wrapper()\r\n"],"file":"log.js"}